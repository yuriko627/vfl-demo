// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.24;

import {Test, console} from "forge-std/Test.sol";
import "../src/ModelRegistry.sol";

import "../src/Client1Verifier.sol";
import "../src/Client2Verifier.sol";
import "../src/Client3Verifier.sol";

// TODO: remove hardcoded proofs
// TODO: add more test cases
contract ModelRegistryTest is Test {
    ModelRegistry public registry;

    Client1Verifier v1;
    Client2Verifier v2;
    Client3Verifier v3;

    address client1 = address(0x1);
    address client2 = address(0x2);
    address client3 = address(0x3);

    function setUp() public {
        registry = new ModelRegistry();
        v1 = new Client1Verifier();
        v2 = new Client2Verifier();
        v3 = new Client3Verifier();
    }

    function testModelRegisterWithProof() public {
        // === Mock trained models ===
        ModelRegistry.TrainedModelPerClass memory class0 = ModelRegistry.TrainedModelPerClass({
            weights: [uint256(1), 2, 3, 4],
            bias: 5
        });
        ModelRegistry.TrainedModelPerClass memory class1 = ModelRegistry.TrainedModelPerClass({
            weights: [uint256(6), 7, 8, 9],
            bias: 10
        });
        ModelRegistry.TrainedModelPerClass memory class2 = ModelRegistry.TrainedModelPerClass({
            weights: [uint256(11), 12, 13, 14],
            bias: 15
        });

        ModelRegistry.MultiClassTrainedModel memory model1 = ModelRegistry.MultiClassTrainedModel({
            models: [class0, class1, class2],
            n_samples: 10
        });

        ModelRegistry.MultiClassTrainedModel memory model2 = model1; // reuse same structure for testing
        ModelRegistry.MultiClassTrainedModel memory model3 = model1;

        bytes memory proofForClient1 = hex"043445ff80b9e675da0a9011fc2b040dab372c32598380f9c41e5e4bb9cfcc142a8f7d668e395776a31bfb5b5aa217bf2c4e5d661b3a78e4144381960634e28a05f6f6017c41c3af9590a1db9a14e7464081aa9c8cfffef9ebbd4deb4394610d02f290493b9ed92714bcb8aeee557a6ddb37531e566ff6fccbfc1c408c8c78e3217615228aeddf069d82718897b5db3e7f683b7603140bdaddc331f9118b916e21c9d72542749ff948aca9bf951a5014b30f3ffb8e8fd8c77a76cdb8afb7bb0a1a36f11d4f3e59e83d671559c8fa5d7ae20d6462442e9c47d9ab7bd0c7ec924d0c2b2c0ea759cc706aca963c15bee3f6dcafc1c05515d416c7c4142821a13b082cbd8df9931ff8ba915ceca1cbe58a7a40008373cd775ca01eab427ca2f2b31d1d04173e21d4dea33b4b4f5390af154346bb1ce32eb74471980c0ae2fee27d85304a1a2149f6f05f01fedba544e307cc900030cc7a4d50081627225134f8dff025c6cdc635798919489f9354bc08d26e9e76c9366eae11237d23f79303687ed41adeab00ad0621f7cf5c7eb0e15147d645cfd4e3a473f8a7b473e25b5bcb94871807cc5027005f481c6f911d196cc31f427b3162559b1b501ecf4635e1127e592293cfe3f8c64354a40b121851d2870ea737f5f76557c49314975900934e1d16281c32eb7a78fd95eeb43012b1923d9f08afd0518571dca0befaf3d179e0248c0a9dfb9c67243ef4a1580e3ffa2d1ef25349be2f465651681ff47246cb534f472495263c9828cb25644a79e57418733032681663fcae16b5f7abe5be94babed20d51603c554adf2c0c0afb44a6d9bd9a8f941bef66ccd429cd4b4b179f2009fa2a45fbf48b479edfe14c52b83d4ff99c23e840f014949220f3e2f2d6af6335d510c2aaadb58de2f6089c973a7aa614486f4f98d9d22dda86ada2e4ad16b412e50646c1b1a1f6e0b660029e37d0f1f35aa7396afb61930ce6b7a06650c851034f2d6b9f52d7c152fb5bc9f0cdece31c60b8f3131294b172b5446d7bee1e044d77038e225e15ca5637847032424ddff003b4274cd8854e3b665852d8ebd13d72af172b54bd90e33fa507685781f4545d74125e2b13852736ebf492db9501024b460a87ebc04692d1f0c376eb9e9a9a497035ca55640f35a2645e0b8dc9bbad21a300596f4a3eb0b4dee93485dd51a27def2737cab5ae075b6297c71388fd2c17412bfd006fd428037dbeb41b591705166556129c47e9591089c82a16d996d6ed59012567de242494e32e5eeb5685cb4088c7bf0d1df16f2236d8f69e1be13afc4d129b781c256290b5484bb7f9f812ba076991f22851afa0c149e6228274fd63d1067e9ca7736bffc4099a730128a29be7af937279a28f3bd916b22e627c7275562f49fc417816e9a925c3927226432828d8cc8f82c1a07da20508c86ea1378ce326b2ff45bbe2ca90c29cd7fbf8bc62ab960a7412b0a96004be37e462fd0036db0e886c764992f8b6498327d5e9b8db8bc69b0d9b1e260aecb1695eecc7f5d70101dde8440fa2bc0fa4a5f591af5302b19fe159f4027d77ed5e486500649ed21b2d325faa9008b3f53e1b2d237c358cfb5e1e1ed0559361611464e6df0752df750f941181ad9c2205e610b925c86bb12563d6e1d445afd69976623fcc93fa60f523ac311cf7c2425647f0ea6ef209a86cff653529fc0b5ba31ea343dda079ad140760024560b6c27cf180d6019a26475772bfa03738ad701b8302525abcf8f932188133cf930816f8de41dea8628d8ddadc28c5cbdd6354206a7e7d70d27e51992bfcf870756fd5d84762304f1428cffe2a15aba2bee203412317e15374896c0407c5c64781bbf1f712261c0b42fc51909f0c3a2c3acbafae437c37c2263dc16b13bb2d96826bdee5bb5add320c9460b913488e4b4f263655fd10f91742b1d77b2f90417bf503031db5413893ed6235e6a9dc46e2a5647a2ed3845a7cd5f79170134412a45df783445ed12426957ed4d11d36b1efe2068ea737e368f9f276dd8e275c323fa81da394c0b1556fbf1ccc18b8c50545986213b0e0246d0afef629ad0b100368111223bb6a41410267396b032c1f7052d504282944837b881b7575cb1b7821e0aadce2cd5361074ac3c43e9f0e4df38cef08f5252b43566bc97845512587d6dbcd113e8af0b446c4a898b0e14f659f2820529a8f7af19e69c38f3d150e959616101d7ac6d6a79ce4538a480fe553b888ec77a42800e0aa29ac6dfcfa036d8b74be67690912536ceff2258b910184ec810dc867833bbbe913b21543612e49f705cdc39e40dcebbef87a21a2ead35c374acbad393d359236895b961ed22cdcfed8490aeffcbed81f18cf0d97f8cfc60164f116c6b488b9062be22c5ea80bc8477783b73849de5f5a42ef34333e084834e1c88c8b0608d6400d994e30e02baa44739cf5c1c874791ed03399ce0f80180f3c79aed181d37bb324a01e95bb2c9856f0d872520024fcc3009549693098867f063866361640919a6dc582bb3911b8f69733ebe15b3f88d5d57f12a9a621b9e0c9a5b26daa23662ee9d147144e239ea60bc9d84b9ae1a07a8fcf4e87a0b8c1bec598a059be7ffca9eac8129ac201211f51f9bb1ffd1062a6981f0f06a203ed71fc05224df6ed7c880a64be1b3d2f9c92dc1656698af150b139fbfadfb798197ce1e77f85da5ebe3787aea6241a2b839205f2aaacfa3c0a09b5bb64e3a208bda093512b3e3f05fdbde4ffdea71c276a912fcefef06986c362317acee78c7961c444bad6f6a3ad3d444251172a1e23519059ab5333d8d17cbaad3a38eb76ea05e7f62482af08547cca9fa24fad2018e81931c1c1c509d1a9efea37b3bb0e22929d7857fe236b7dd0fdc009d799572f99a760c22116be3d5efec7dfbbc39db84c1e3a77068c61d1e216999578ba5a131d3b7de1fd0bdebce4e5933eeef4e7f647f6f334850e9814da475bed0790392a000cc97a4a4b25e9e68da9d8861002095375fb08a1ddd7882ed92d35596f86";

        bytes memory proofForClient2 =
        hex"0166ea334e3d8133884daefcb15c5b4aeccdd59a7d4a315d3d695f1c1c2cd8752e24098468477eeae4409e8f82034f77932ac721ba2cbe87d5cede13556ef74822413ad3db1f6fb31ca7788fde4fc1ab2b96c05464caf85454626a8cf9ca2cd01cd89f19cb05b3bb3d675165b959881dfd3f23f7f0a24b3f6146f69db6d5853a0c1757fc86ab89d2516886e444d942af1f0b646b120c080c3b679ff65462db8026bd166b2c5b40050fdf5507bf849f5debcace3b3897207ffe84c1e052f45a8708c86b0623307f2acd38a8e566777867e46f3dd36b20865c4f5ad592f2a1e44708017c2ee4b40df8c229c2ac5100cec783c49edaa00e640f0d2b8e1d9ffc63ea2a3f5cecae66d583e2ba633ef613214b1f0e0ffcc141bd09a8a3064cfe8024b81d04630cf0a46151e0713a3ead61c1d35a29bd0d435335bdb02127c04d5183a12407760c118965a4d03d390be95c6671d332524567f907d4a01cd3b2455ea8fb1c532def57ddef9fffd70f5e222f10b3787d11a2881d0682a318d9f577dd25a9270e5b616f55069133fc9c91d682b21d4568e0ea48bb5bed98ef4e6850677dce084db77060847372b2e5b1577b27be82d03164f8536bd1150821d9a59310ce212076dc69492c2ee1d806dd6f67686a05d397dfb535a3ed7bea8259e0b249d33e205d11af514b31ae3a76067eb716bd916d61009490f646c767041f9d767ffd5f0518767e45871aaa33b96a1bfc8dcf0d46c1abffcdc6dd8de9a9749b48fe86891a3960efe23fc43349af3efa1f215f1ef8188e7d2452dd069387a0ed7d1f99972db0f35825bf46cf5a5c6491739195ac47797381bcde580bc07d43cbfabf46f2199cbcaf3e7ebab898efd9fbc4df249d042d4eb3c3a8680358bce88b341c8e751971e938e04a8abe7dbf4402d83e0d4b26b53677c8197900d05cac70886c09f22f4fba120bdcbd49c1c264d579142ec4f5034d1e7ede6f54b0a7150df2ae7fc92a292420ed2668161580332e3c05a561e6384f875343f74dc82a1864df65fbc416f1307c5e890b0b99fb533d58df111367862ad62bc8f0bb8775e9e53895572c1ea6f073b7432f979a527a5eb69acfe9484401170d1828dcb190214ee25be7052941e482548346be810df3620aace4424197abba886559439f58ee59819459ea1e39957aa7646f970e66a686a6c8348b41448ccaac8a16eba621d1174cfc8035019896fecb58f904beccad7a2194ecf46c4b1c57ac4886de62d95f8472911fe22467c8519bc3833c5976a4fcee0297ddb6d62e6a50018224e266e9f3ea181f271b4b6366eb9dd2b49b6bcfcc0f40ce6e4cd2a6cb30e886a451e1b1373d49cee902cfcc16e43099ec90a0a59ed5b3e952f608dd38e7c70abd4a3c1804cf2dc7ba043161fabb6cd50927dab6adb809907db96948e5aae019e5273b0df310438ff02777563370d7c00b23f906e11780aa0dff312f5f45e97e207ea66f4e96991e711b20cd72d89dc0a2ac734edfde63d0d5a682386a5ffd316cf4c1f59b98f001600210ab38821609db65e2c2007aeb90653bc124e26889c2b9b7d6a75951feb8f80d8a74c7ff26a23cf66e9e83ff5f9decff8071113ac74c96aa1d9858ae074e4d2596471315728f53bb5f48d8156618e6ebb69990bf165245e052dd244d09b547305599c3d447154369d53aa9e843070f6e33e9cbe6304aa0c4d9777b54aaebf00ab09e01b1e9fb095ffae6c5399e9cdac87d51be9390d26a657e1c3e6c4c229822839fb412b0ffb90668804226a0c72eedba3ecc884395f79bc3c2785297b8f31a903c56512a72882e8d664830ef2ba6441d04c1f09c84a218d1795c6efaf5041cdd60ffb434047c83deac62c4586588c32cc69daf5f0669839bd98ba432bd5b29807f6162734e7c896f496592e3e10e1b64bc678da0ad9987d40f36c75c6e84202f43632f9306e8bce6ca68df58792bcd77f234e1c4c3202e8b50ec7b8e8fea2aee9613ee678cd86b5cbc3ab23567544ff5427008debb7b1311eb43832fc69305499a51cc0a729e618268560390fd1faa3eaa62b63f4344b3b690069ad0fd3b1008ed028adef88e0ff85a27d66deb482cbbfa9ddd593b9f983d2a5da27233e4156ff0b270be80f90e70d8970c7b8b034afaa1f9baaacac54a04b69573ed59410e3c1e5e063da1e82fce4082807042ac6e75ac4a37acbfa8a7b6c0b68a87b19b29fa8074d8ef4639c45c9a9e54a62cc234a6d3e5fab06de0438764fd1f888ac921a6ec4259a03834a8ad3cabfba8ab7dfc0a5417256c10d4282c8a6e0ba29be020b370da4557b0cffd4fb7f3cc2261306900e2bb1375f10c9273cac1e2313ca217fed6012772e81493dff2f07da245e8da7cb3b6ab572fd8f33178a7a3f75f1114a864c26c26387b75db86453198365b3f0c6c348b170d6a02ca9a84d9b4e9af21a1f5c744b65ea707e44287349825ce637ca1c59ca9fce41aa3f9fe8d4b67132382c201830e5caab9bbb0cfd4244bc127bf3a96d35d518909bf15ca36001e8e0f512bbe7ec8646ccc4f53b81a30e557d8921f01d5f31729543444278d8f8bda028141f4acf9d943f7f706c74d356e5066ea3f8527163db545d9d1863713b11307fd9fe121fd0be38aefa9bff5464023388c68cd615865f45e776bd8d77d90bd0aeae4d0e776092dff641e1f4fd33c0dd0dedbdc02249a857e93dfbed357969b1ffd98922de9e20336cde858a1c565e073070ef7350a40f7d013ae0c5e498dd304abfde0932c1aaeb5e76cdb72363755ecfb59c9ee3676d8ddb186c5f93b850a19beb1a1d99ff383ed513714c42861288f238ce5211c1d4b2f315513842d7c421d2ad7f2cfea0fcf17c6c7133c4491214a2bf40c177c16ea2b4dc0cd3b42bcb8239cdce48894dc08e4f434db718bf12228b9c147991c3d8eb8f0a73a8b3f229a12a8e63f0398f93b1f44200a26b7eeb3bddfbfe1d01f08b68571c6b2f71ba62f0a98b76269120b92a8a481a1717700f8addf1618e1311725202a9820c20eaed0";

        bytes memory proofForClient3 =
        hex"0656b1515d6b0f843b547bc3f44955d000fd309a83477bfcb69c6ea68beb26f51b14bc769cdaa0c3080b05c551cbc968ffeebcc7d27177a301c34d63316cb79607847f2a977c3c3f6782ff749efe6a96885123454290e3096dfc5537ca956aa115da4955c60b113e66b3968a59f04e330ee82df6d16ff7e88f764d3ff9c8ab042ba342cbb011855417e0a50b1398b68b8fea2f67a7d5f549bf801ccabaeca3f819f829c9d0a794e4bd5d68a78b7c2a2c69a01b4d8b389653b6b85a8d19ed6be2231d58c413ebedced1f7a73d2a26ecf902a0ccf2b26e69467a563d1147bef4690ba62e425b53b20d5af759204a31c320f7e09c40ed50037913443e1d12171eb31ed2fa8ad95cc848074b0ac6244d9354e343e46c7d1acf163ba889ca39393dde01771afdb2fc32fdce086db3d428e6c0674bdc48db90723f98c50615f8de5d992f07d3bbc96c1f65871fcd919dfeddd4762fd45e15675a50f633da27670e41fa2a292856c2e49379c9ba01f04e984cf11ddb74e747e30d995302100d0a2f4ae32b7f1d7e110ccb455d7a7b3f734b8e57f8d00f86fe98344e674e2603533c2409177b24326145d41de96d005382cbaeccfacff454186417504725bb6f66783c7922da6bfa08b221511325f4eb81a671547cbc3d2adbb96223c5e0f349fd99a9bc23c647274956febccb03ecd08e8bedf778fde14dea3011a4d6723e9451786576278725356782a768074ad41b56c46cdd42c6b5e10453b44ff78fa02df9f449ad0eefa82eed04299b53ec0b83311660bcaaf115fd7c0d3ed37e1d01a219ee2e9a24730fd622618262cffa93a1ffc9297e28de9bc83b868400383f754726888ed81c51ae9e027ee09fa06d66947f05acfe39ba5f0ef3adfd22060b22fb48ddcd2307cb7456e70682e9b2ddf2d6f2f7d6c11819f75934af7f6477164b637426d81729b757a5049cbf1cb53fdb390be038d4ff040a8b2fbc550a6d32ff925dc3c1a80733bd18cd75b390d4a91e23aa91548cce06679a0f8ac1d73a4157fdc153570708e1eb5248c4bd37c68ffae60cd4510c864c6fe04891ab4ab40f95f113c86bec1183f808f8040c4d1bf5b3881d88fd4fbbfac9a9edb876c6390ca22fcb02478212698f0b72f4b49d3c09c36a2cf8eaeb864e2cbccb4ae67ceabd3e9ed1ca9146237c35f439167183dda83da9508b0c4d83c09fa42ec4d39555915161414a6bd523cca6bf699a30d76f7ed3d26c4712da9b515bc5299fe4e446bfd61d59e4f95f19e6cc7703201362d6472f720bb4b9ac87ca989e5a1389b46393236ef150f2e0229dd888aea79a6f2d4233959aadc4e53fba18604972e0ffc0807438d91b5735303ab035a24185d15abfbadddf87e7ff94af20f647c1f2a419266221b39d9dcd1698773c510dbd3ed9a315ede02c4d2955831a4cc4d69911dfea72c6e301025c2ca134459bacccbec9a882b1696ac23a40468862f06b5f4d8e5d4cb7592ab8ae0884ee28cd9bec1bba57fae01767bdc5128585cdf1ca75838ad6dc01e86b39ee101a93534e02dd5d30f8b429fd5a0d8ae5fafa108d8ea089c666ff0ac09afa012bf22b8d6c4e9f3e293e9dadbed67fc263c369293663804d57290202566beb2a164433053743b415d60c15172d1e145e135f02927c985c2557670edcfdb514b8190cb965de2c2a9890cd97ba12c1d6e9d5cae2e4cc2b67aa0253f0b89d6bb74f1bd53fc68514a11b4b8f1a5cf86599759836c3371bbe732ead40d2943d2259e61c0ec898d012fd09da85c960fdce14dcbf5bcd4a10289b165bfa02b3723d0c2827ea7a541efd14ea251a6b32a72d99aafd915ac1315aef526d52371b235fef1504ff658ba8443f125b090720644aa8cfb57ce16de664fc3ad18deecb05fd97251cc260545bb1d4f764a5c84672d6c820e1108042a4e3b333e6fb9adfa76eacbc21664c87d2e58e20c1121fa2c3ad1e8d1d0e83dbbae48a38031a964b7c8f9f14242ed2e879ce04a37bd3a245a950e118df7a642e0a7795bcae0778271c4641ab26f7594920b67b26369524e88ef4a3a4a1e644805a0aa14158f45a02bbfce44229bfdfa9c79ef1a8f156a78b74986630645224d2a99dacc603e13bde5bb386d91e9dc6272bfd179e06509cffde095c015aa2a3896b517eb3582db46fdcd8fc7d24dfa040bdcd16b1987e31d0c3d664cf5d97901012ed23bd8708ae9d24e6ca7b29d03311cd122404042db83930c4571bc8ae91dc892ee250a63ca99cfb8b0555285054ea8ae25fb1788f17e22313c2cbd043270920835021efbf0f0978b1751c1bc21e1f16ff5b61dd1708c5d451934e37ccc886bb5de0926702529f6d5ef648191dc0c70e71194824712f18dbd223e4388cbde682c2a976034eb4d589f511a6119b51b0e4abcb619120d7dc2d81fd89a9be9e99c1a1d936061a5a450f02b5cd0b6eac6c1745839b719f2ececc3eec008915ef5b5bc4d07b2dce317cda9d26831d80ee156e5e476c3fb96462ff5f015520cb0197eb40afc5ce0c73f106f2978a0bf837f4742a9185143ed80e3883d6a718a23da7e25ef4408805a438524b6b0c2ea7109de36aef8165eb121d2064c1f075f4e7ab07a1eada42a978ff863539e72b28369c39edcecc812720d2b9b59e8c561c7a29c828c8c70d269b6fd64bd44427142c47bdca5ddc2d1a0c294c8f70fe236e2f4dd65f741a78f465a51ae04d281a346b276d355af5f36c209a9270479eee50bb26d4feed96ec681c418d1da8eb0d54aa071ca0580fb9be350bd8511e3fb93346ffd39e67135fdbd2ddff5b04ae0074e8e6cc0b55298010497d1e31f4e08415d2d8d23de08fd34f897a7198607120bca2f3f9427da406087c8f1d6947662bce316ae4200c17cd1f58beadc58eac292a89d2aeb15f58009e5c722df087a8854272a5e55caf9ea41aa008d4acd1731315641ef27574596e226db4bfeeec429c549f2f9ef34607a44b8cbcf4d387ce1e10a3ae72dd99ad2e3b19459010bd040cf76ed36bbd27c6a68bb8fc6ce44d39";

        bytes32[] memory dummyInputs; // should be empty in the correct case

        // === Register models ===
        vm.prank(client1);
        registry.registerLocalModel(proofForClient1, address(v1), model1, dummyInputs);

        vm.prank(client2);
        registry.registerLocalModel(proofForClient2, address(v2), model2, dummyInputs);

        vm.prank(client3);
        registry.registerLocalModel(proofForClient3, address(v3), model3, dummyInputs);

        // === Check that all models are registered ===
        ModelRegistry.MultiClassTrainedModel[] memory fetchedModels = registry.getModels();
        assertEq(fetchedModels.length, 3);

        // Check that the model for client1 is what we expect
        ModelRegistry.TrainedModelPerClass memory model1Class0 = fetchedModels[0].models[0];

        assertEq(model1Class0.weights[0], 1);
        assertEq(model1Class0.weights[1], 2);
        assertEq(model1Class0.weights[2], 3);
        assertEq(model1Class0.weights[3], 4);
        assertEq(model1Class0.bias, 5);
        assertEq(fetchedModels[0].n_samples, 10);
    }


}

{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":3672452839326788705,"abi":{"parameters":[{"name":"submitted_models","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"training_prover::train::MultiClassTrainedModel","fields":[{"name":"models","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"training_prover::train::TrainedModelPerClass","fields":[{"name":"weights","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aggregation_prover::noir_mpc_ml::quantized::Quantized","fields":[{"name":"x","type":{"kind":"field"}}]}}},{"name":"bias","type":{"kind":"struct","path":"aggregation_prover::noir_mpc_ml::quantized::Quantized","fields":[{"name":"x","type":{"kind":"field"}}]}}]}}},{"name":"n_samples","type":{"kind":"struct","path":"aggregation_prover::noir_mpc_ml::quantized::Quantized","fields":[{"name":"x","type":{"kind":"field"}}]}}]}},"visibility":"private"}],"return_type":null,"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"9174856516895611197":{"error_kind":"string","string":"Division by zero is not allowed."},"16646908709298801123":{"error_kind":"string","string":"attempt to subtract with underflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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JMAnEuATCfCJBPhEAnwiAT6RAJ9IgE8kwCcS4BMJ8IkE+EQCfCIBPpEAn0iATyTAJxLgEwnwiQT4RAJ8IgE+kQCfSIBPJMAnEuATCfCJBPhEAnwiAT6RAJ9IgE8kwCcS4BMJ8IkE+EQCfCIBPpEAn0iATyTAJxLgEwnwiQT4RAJ8IgE+kQCfSIBPJMAnEuATCfCJBPhEAnwiAT6RAJ9IgE8kwCcS4BMJ8IkE+EQCfCIBPpEAn0iATyTAJxLgEwnwiQT4RAJ8IgE+kQCfSIBPJMAnEuATCfCJBPhEAnwiAT6RAJ9IgE8kwCcS4BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM94BM9MiMOGRIH+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+EQP+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQA+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQI+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQE+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MQM+MTHf9qQBxnkQRZ5kEMeRMiDPPKggDwoIg9KyIOQM8IgZ4RBzgiDnBEGOSMMckYY5IwwyBlhkDPCIGeEQc4Ii5wRFjkjLHJGWOSMsMgZYZEzwiJnhEXOCIucERY5IxxyRjjkjHDIGeGQM8IhZ4RDzgiHnBEOOSMcckY45Iwg5Iwg5Iwg5Iwg5Iwg5Iwg5Iwg5Iwg5Iwg5Iwg5IzwyBnhkTPCI2eER84Ij5wRHjkjPHJGeOSM8MgZcewik00fD0rBVI85dpGNxxjgMfbaY/75+Nf/+29///O//ftf/vTfj0d8/x//56//8Y8//+2vH//8x//3X/v/8u9///Nf/vLn//zX//r73/7jT//nf/7+p3/9y9/+4/v/9oft+//5flK58I3Cbyt5/MM4/83Q9sfHQ833A378R7t9M9Z//4+2/Ee3fXO//SdX/tNjyc59/09U/rb/Rv7gb/v9ABu+ufLkPqdvYfvtL4TyF+w3suUv2PzNOPp+QCzPGvK3+Nt/SvtjUvyWY3nM418m2+8H5OdKvftmffp+jPltFf6bDfG3XRcu5L55V/7K41+G0m9HmPI8/lt+7m4L9O3xf/LjBXq8SP8/","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"30":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    /// Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    /// Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"60":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse crate::static_assert;\nuse super::{convert::AsPrimitive, default::Default};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        static_assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                /// Safety: optionally adds 32 and then check (below) the result is in 'a..f' range\n                let ascii =\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        /// Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n        /// Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        /// Safety: cf div() above\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nimpl Default for U128 {\n    fn default() -> Self {\n        U128::zero()\n    }\n}\n\nmod tests {\n    use crate::default::Default;\n    use crate::ops::Not;\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        /// Safety: testing context\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n\n    #[test]\n    fn test_default() {\n        assert_eq(U128::default(), U128::zero());\n    }\n}\n","path":"std/uint128.nr"},"62":{"source":"use aggregation_prover::aggregate::aggregate;\nuse training_prover::train::MultiClassTrainedModel;\n\npub fn main(submitted_models: [MultiClassTrainedModel<4, 3>; 3]) {\n    let aggregated_model = aggregate(submitted_models);\n    println(\"aggregated model: \");\n    println((aggregated_model))\n}\n","path":"/Users/yurikonishijima/Development/vfl-demo/server/src/main.nr"},"63":{"source":"use noir_fixed_point::quantized::Quantized as QuantizedWithDiv; // this has a division function\nuse noir_mpc_ml::quantized::Quantized;\nuse noir_mpc_ml::utils::assert_bitsize;\nuse training_prover::train::MultiClassTrainedModel;\nuse training_prover::train::TrainedModelPerClass;\n\n// New struct definition using QuantizedWithDiv, which has division implementation\n// We switch form the original Quantized struct to this struct becuase we need to do division at the end for weighted average calculation\npub struct FinalTrainedModelPerClass<let M: u32> {\n    pub weights: [QuantizedWithDiv; M],\n    pub bias: QuantizedWithDiv,\n}\n\n// multiclass model\npub struct FinalMultiClassTrainedModel<let M: u32, let C: u32> {\n    pub models: [FinalTrainedModelPerClass<M>; C],\n    pub n_samples: Quantized,\n}\n\npub fn castToQuantizedWithDiv(q: Quantized) -> QuantizedWithDiv {\n    QuantizedWithDiv { x: q.x }\n}\n\npub fn aggregate<let M: u32, let C: u32, let L: u32>(\n    submitted_models: [MultiClassTrainedModel<M, C>; L],\n) -> FinalMultiClassTrainedModel<M, C> {\n    // Initialize temporary empty model to accumulate weighted sums for weights and bias\n    // We use original Quantized struct\n    let mut temp_aggregated_model: MultiClassTrainedModel<M, C> = MultiClassTrainedModel {\n        models: [\n            TrainedModelPerClass { weights: [Quantized::zero(); M], bias: Quantized::zero() }; C\n        ],\n        n_samples: Quantized::zero(),\n    };\n\n    // Loop over each model submitted by clients, stored in `submitted_models`\n    for client_idx in 0..L {\n        println(\"client_idx:\");\n        println(client_idx);\n        let model = submitted_models[client_idx];\n        let unscaled_n_samples = model.n_samples;\n\n        // println(\"unscaled n_samples\");\n        // println(unscaled_n_samples);\n\n        // n_samples is 20 = 5 bits at max for this demo\n        assert_bitsize::<5>(unscaled_n_samples);\n        temp_aggregated_model.n_samples += unscaled_n_samples;\n\n        // println(\"total number of samples summed up so far\");\n        // println(temp_aggregated_model.n_samples);\n\n        // Summing up weights at the same index for each class, submitted by different clients 0-2\n        //                          |class0                     | |class1                     | |class2                     |\n        // model 0 (from client 0): [w000, w001, w002, w003, b00] [w010, w011, w012, w013, b01] [w020, w021, w022, w023, b02]\n        // model 1 (from client 1): [w100, w101, w102, w103, b10] [w110, w111, w112, w113, b11] [w120, w121, w122, w123, b12]\n        // model 1 (from client 1): [w200, w201, w202, w203, b20] [w210, w211, w212, w213, b21] [w220, w221, w222, w223, b22]\n        // aggregated model       : [w000+w100+w200, w001+w101+w201,...,b00+b10+b20]...\n        for class_idx in 0..C {\n            let current = model.models[class_idx];\n\n            println(\"class_idx:\");\n            println(class_idx);\n            println(current);\n\n            // Weighted sum for each weight\n            for weight_idx in 0..M {\n                println(\"weight:\");\n                println(current.weights[weight_idx].x);\n                println(\n                    \"temp_aggregated_model.models[class_idx].weights[weight_idx].x:\",\n                );\n                println(\n                    temp_aggregated_model.models[class_idx].weights[weight_idx].x,\n                );\n\n                // max input bit size for safe addition: 125 bits\n                // directly perform operation on the Field elements inside the Quantized struct\n                assert_bitsize::<125>(temp_aggregated_model.models[class_idx].weights[weight_idx]);\n                temp_aggregated_model.models[class_idx].weights[weight_idx].x +=\n                    current.weights[weight_idx].x;\n            }\n\n            // max input bit size for safe addition: 125 bits\n            // directly perform operation on the Field elements inside the Quantized struct\n            assert_bitsize::<125>(temp_aggregated_model.models[class_idx].bias);\n            temp_aggregated_model.models[class_idx].bias.x += current.bias.x;\n        }\n    }\n\n    // Initialize empty model to be returned as a final aggregated model\n    // We need to do division so we'll use QuantizedWithDiv Struct here\n    let mut aggregated_model: FinalMultiClassTrainedModel<M, C> = FinalMultiClassTrainedModel {\n        models: [\n            FinalTrainedModelPerClass {\n                weights: [QuantizedWithDiv::zero(); M],\n                bias: QuantizedWithDiv::zero(),\n            }; C\n        ],\n        n_samples: temp_aggregated_model.n_samples,\n    };\n\n    // Divide all sums by total_samples to get weighted average\n    // Since original noir_mpc_ml::quantized::Quantized does not implement division,\n    // let's it to noir_fixed_point::quantized::Quantized first which has division function implemented.\n    for class_idx in 0..C {\n        for weight_idx in 0..M {\n            // println(\"weight_idx\");\n            // println(weight_idx);\n            aggregated_model.models[class_idx].weights[weight_idx] = castToQuantizedWithDiv(\n                temp_aggregated_model.models[class_idx].weights[weight_idx],\n            )\n                / castToQuantizedWithDiv(temp_aggregated_model.n_samples);\n        }\n        aggregated_model.models[class_idx].bias = castToQuantizedWithDiv(\n            temp_aggregated_model.models[class_idx].bias,\n        )\n            / castToQuantizedWithDiv(temp_aggregated_model.n_samples);\n    }\n\n    aggregated_model\n}\n\n","path":"/Users/yurikonishijima/Development/vfl-demo/aggregation_prover/src/aggregate.nr"},"66":{"source":"use std::cmp::Ordering;\nuse std::field::bn254::decompose;\nuse std::ops::{Add, Div, Mul, Sub};\n\n// IMPORTANT: This library is designed to work with a fixed scale factor of 2^16\n// See further explanation in the `Quantized` struct comments below.\nglobal scale: Field = 65536; // 2^16\n\n// A signed fixed-point number `x` is represented in a single Field element.\n//\n// Representation Overview:\n// A Field element is a type with 254 bits.\n// We only use the first 126 or the last 126 bits.\n// A positive number is within the first 126 bits.\n// A negative numbers is within the last 126 bits.\n// The \"middle\" 2 bits that are left over, should not be used.\n// - Positive values have bits set in the lower part: |x_0,x_1,x_2,..,x_125, ... ,_,_,_,_|\n// - Negative values have bits set in the upper part: |_,_,_,_, .. x_128,x_129,..,x_253|\n// So following above visual, x_126 and x_127 MUST be 0\n//\n// Modular arithmetic ensures correct handling of signed fixed-point numbers by wrapping\n// values around the field's modulus. For example, subtracting 5 from 3 in a field with\n// modulus `p` results in (3 - 5) mod p = p - 2, representing -2. This behavior allows\n// negative values to be correctly encoded in the field's upper range.\n//\n// Scaling:\n// Since fields do not inherently support decimal values, the fixed-point representation\n// uses a scale of 2^-16. This means that:\n// - `Quantized { x: 1 }` represents the value 1/2^16.\n// - To represent an original value, divide it by the scale, truncate, and store the result.\n// Example:\n// - Original value: 0.001\n// - Scaled value: 0.001 * 2^16 = 65.536\n// - Truncated result: 65 (stored as `Quantized { x: 65 }`)\n//\n// Overflow and overflow prevention:\n// To make sure the arithmetic performed on a value will not overflow, the library contains\n// bitsize checks that prevent numbers from growing larger than 126 bits. More concretely:\n// - multiplication: inputs must have bitsize <= 63\n// - addition: inputs must have bitsize <=125\n// - subtraction: inputs must have bitsize <=125\n//\n// Conversion Steps to `Quantized`:\n// 1. Check if the original value `x` is negative. If negative, use (p - |x|), where `p` is\n//    the field's prime modulus. Otherwise, proceed with `x`.\n// 2. Multiply the value by the scale factor (e.g., 2^16).\n// 3. Store the scaled value in a `Quantized` struct.\n//\n// Prime Modulus:\n// The field modulus `p` used in this implementation is:\n//   p = 21888242871839275222246405745257275088548364400416034343698204186575808495617\n// This prime comes from the Barretenberg backend.\npub struct Quantized {\n    pub x: Field,\n}\n\n// returns 1 for a negative element, 0 for a positive element\n// A Quantized element is negative if the upper bits are set, so this is what we check for.\n// NOTE: this asserts the field contains has maximum 126 bits. If the element contains more than\n// 126 bits either way, this function cannot correctly indicate whether it's negative or not.\nfn is_negative(x: Field) -> Field {\n    let (lower_bytes, higher_bytes) = decompose(x);\n    if higher_bytes == 0 {\n        // Make sure the number is not overflowing the 126 bits\n        x.assert_max_bit_size::<126>();\n        0\n    } else {\n        1\n    }\n}\n\nimpl Quantized {\n    // Assert that number of bits <= bitsize\n    // if quantized is negative, it counts the bits backwards\n    // NOTE: this works only for bitsize <= 126, because decompose gives us\n    // 128 and 126 bits\n    pub fn assert_bitsize<let bitsize: u32>(self: Self) {\n        // Decomposes into two 128 bits chunks\n        let (lower_bytes, higher_bytes) = decompose(self.x);\n        if higher_bytes == 0 {\n            // positive number\n            self.x.assert_max_bit_size::<bitsize>();\n        } else {\n            // negative number\n            (-self.x).assert_max_bit_size::<bitsize>();\n        }\n    }\n\n    pub fn zero() -> Self {\n        Quantized { x: 0 }\n    }\n\n    pub fn new(x: Field) -> Self {\n        let res = Self { x: x };\n        res.assert_bitsize::<126>();\n        res\n    }\n\n    fn add(self: Self, other: Self) -> Self {\n        // To prevent overflow, allow max 125 bits for both inputs\n        self.assert_bitsize::<125>();\n        other.assert_bitsize::<125>();\n        Quantized { x: self.x + other.x } // if one is negative, this wraps around automatically\n    }\n\n    fn sub(self: Self, other: Self) -> Self {\n        // To prevent overflow, allow max 125 bits for both inputs\n        self.assert_bitsize::<125>();\n        other.assert_bitsize::<125>();\n        Quantized { x: self.x - other.x }\n    }\n\n    fn mul(self: Self, other: Self) -> Self {\n        // To prevent overflow, allow max 63 bits for both inputs\n        // Perform multiplication of the underlying field elements\n        // This doubles the scale.\n        self.assert_bitsize::<63>();\n        other.assert_bitsize::<63>();\n        let mut temp: Field = self.x * other.x;\n\n        // Scale down by dividing by 2^16\n        // Since the scale is a multiple of 2^8, this will scale it down correctly.\n        // Note that we have to take care of the case that the value is negative; in that case we flip the sign\n        // temporarily, and flip it back at the end. Otherwise the division doesn't work\n\n        // Check whether we're working with a negative value\n        let negative = is_negative(temp);\n\n        temp = negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616 - temp\n                    + 1\n                    - temp\n            )\n            + temp;\n\n        // Division by 2^16, code as suggested by Tom French @TomAFrench\n        // Cast x to a u16 to preserve only the lowest 16 bits.\n        let lowest_16_bits = temp as u16;\n\n        // Subtract off the lowest 16 bits so they are cleared.\n        let temp_with_cleared_lower_bits = temp - lowest_16_bits as Field;\n\n        // The lowest 16 bits are clear, `x_with_cleared_lower_bits` is divisible by `65536`,\n        // therefore field division is equivalent to integer division.\n        let mut final_res: Field = temp_with_cleared_lower_bits / 65536;\n\n        // If the result was originally negative, flip the sign back\n        final_res = negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616\n                    - final_res\n                    + 1\n                    - final_res\n            )\n            + final_res;\n\n        // Return the result as a new Quantized instance\n        Quantized { x: final_res }\n    }\n\n    fn div(self: Self, other: Self) -> Self {\n        // Ensure `other` is not zero\n        assert(other.x != 0, \"Division by zero is not allowed.\");\n        self.assert_bitsize::<109>(); // will be multiplied by scale later, so we allow 126-17 bits\n        other.assert_bitsize::<126>(); // standard bitsize check\n        // Flip signs of numerator and denominator if negative, work with their absolute values\n        let mut numerator = self.x;\n        let mut denominator = other.x;\n\n        let mut numerator_is_negative = is_negative(numerator);\n        let mut denominator_is_negative = is_negative(denominator);\n\n        numerator = numerator_is_negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616\n                    - numerator\n                    + 1\n                    - numerator\n            )\n            + numerator;\n\n        denominator = denominator_is_negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616\n                    - denominator\n                    + 1\n                    - denominator\n            )\n            + denominator;\n\n        // Scale numerator before division\n        let scaled_numerator = numerator * scale;\n\n        // Cast to U128 for division\n        let scaled_numerator_u128 = U128::from_le_bytes(scaled_numerator.to_le_bytes());\n        let denominator_u128 = U128::from_le_bytes(denominator.to_le_bytes());\n\n        // Perform the division in U128\n        let result_u128 = scaled_numerator_u128 / denominator_u128;\n\n        // Cast back to Field\n        let mut result = Field::from_le_bytes(result_u128.to_le_bytes());\n\n        // Determine the sign of the result\n        let result_is_negative = numerator_is_negative + denominator_is_negative == 1;\n\n        // If result is negative, flip sign back\n        if result_is_negative {\n            result = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - result\n                + 1;\n        }\n\n        Quantized { x: result }\n    }\n}\n\nimpl Add for Quantized {\n    fn add(self, other: Self) -> Self {\n        self.add(other)\n    }\n}\n\nimpl Sub for Quantized {\n    fn sub(self, other: Self) -> Self {\n        self.sub(other)\n    }\n}\n\nimpl Mul for Quantized {\n    fn mul(self, other: Self) -> Self {\n        self.mul(other)\n    }\n}\n\nimpl Div for Quantized {\n    fn div(self, other: Self) -> Self {\n        self.div(other)\n    }\n}\n\nimpl Ord for Quantized {\n    fn cmp(self: Self, other: Self) -> Ordering {\n        if self.x == other.x {\n            Ordering::equal()\n        } else {\n            let (_, sub_hi) = decompose(self.x - other.x);\n            if sub_hi == 0 {\n                Ordering::greater()\n            } else {\n                Ordering::less()\n            }\n        }\n    }\n}\n\n#[test]\nfn test_order() {\n    // Test 1: comparison between positive and negative value.\n    // a = 0.2 and b = -0.2\n    let a: Field = 13107;\n    let a_quantized = Quantized { x: a };\n    let b = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized > b_quantized);\n\n    // Test 2: comparison between two possitive numbers.\n    // a = 1 and b = 0.2.\n    // Then a * 2^16 = 65536\n    let a: Field = 65536;\n    let a_quantized = Quantized { x: a };\n    let b = 13107;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized > b_quantized);\n\n    // Test 3: comparison between two possitive numbers where the roles are\n    // inverted.\n    // a = 1 and b = 1.2.\n    // Then a * 2^16 = 65536\n    let a: Field = 65536;\n    let a_quantized = Quantized { x: a };\n    let b = 78643;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized < b_quantized);\n\n    // Test 4: comparison between two negative numbers.\n    // a = -1 and b = -0.2.\n    // Then a * 2^16 = -65536 therefore taking mod p we obtain that\n    // a = 21888242871839275222246405745257275088548364400416034343698204186575808430081\n    // b = 21888242871839275222246405745257275088548364400416034343698204186575808482510\n    let a: Field = 21888242871839275222246405745257275088548364400416034343698204186575808430081;\n    let a_quantized = Quantized { x: a };\n    let b = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized < b_quantized);\n\n    // 21888242871839275222246405745257275088548364400416034343698204186575808495617 - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efff8001\n    // - 32768\n    // 21888242871839275222246405745257275088548364400416034343698204186575808495617 - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effb0001\n    let a = Quantized { x: 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efff8001 };\n    // - 327680\n    let b = Quantized { x: 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effb0001 };\n    assert(a > b);\n}\n\n#[test]\nfn test_is_negative() {\n    // Test 1: checking if it's negative for a positive value.\n    // a = 0.2   =>   0.2 * 2^16 = 13107\n    let a: Field = 13107;\n    assert(is_negative(a) == 0);\n\n    // Test 2: checking if it's negative for a negative value.\n    // a = -0.2  =>   -0.2 * 2^16 = -13107\n    // Hence, -13107 mod p = p - 13107 = 21888242871839275222246405745257275088548364400416034343698204186575808482510\n    let a = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    assert(is_negative(a) == 1);\n\n    // Test 3: checing if it's negative for a negative larger value.\n    // a = -1301.34  =>  -1301.34 * 2^16 = -85284618\n    // Hence, -85284618 mod p = p - 85284618 = 21888242871839275222246405745257275088548364400416034343698204186575723210999\n    let a = 21888242871839275222246405745257275088548364400416034343698204186575723210999;\n    assert(is_negative(a) == 1);\n}\n\n#[test]\nfn test_add() {\n    // Max value 2^60-1, positive and negative\n    let a = 1152921504606846975;\n    let b = -1152921504606846975;\n    let a_quantized = Quantized { x: a };\n    let b_quantized = Quantized { x: b };\n    let addition_quantized = a_quantized + b_quantized;\n    assert(addition_quantized.x == 0);\n\n    // Test case 1: Max value 2^60 - 1, positive and zero\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = a1_quantized + b1_quantized;\n    assert(addition1_quantized.x == a1);\n\n    // Test case 2: Small positive values\n    let a2 = 12345;\n    let b2 = 67890;\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let addition2_quantized = a2_quantized + b2_quantized;\n    assert(addition2_quantized.x == (a2 + b2));\n\n    // Test case 3: Positive and negative values resulting in a non-zero positive result\n    let a3 = 50000;\n    let b3 = -30000;\n    let a3_quantized = Quantized { x: a3 };\n    let b3_quantized = Quantized { x: b3 };\n    let addition3_quantized = a3_quantized + b3_quantized;\n    assert(addition3_quantized.x == 20000);\n\n    // Test case 4: Positive and negative values resulting in a non-zero negative result\n    let a4 = 30000;\n    let b4 = -50000;\n    let a4_quantized = Quantized { x: a4 };\n    let b4_quantized = Quantized { x: b4 };\n    let addition4_quantized = a4_quantized + b4_quantized;\n    assert(addition4_quantized.x == -20000);\n\n    // Test case 5: Add two negative values resulting in a negative value\n    let a5 = -40000;\n    let b5 = -20000;\n    let a5_quantized = Quantized { x: a5 };\n    let b5_quantized = Quantized { x: b5 };\n    let addition5_quantized = a5_quantized + b5_quantized;\n    assert(addition5_quantized.x == -60000);\n}\n\n#[test]\nfn test_mul() {\n    // Test case 1: Small positive values\n    let a1 = 12345; // original value 12345/2^16 = 0.1883697509765625\n    let b1 = 67890; // original value 67890/2^16 = 1.035919189453125\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    // new value = 0.1883697509765625 * 1.035919189453125 = 0.1951358397491276264190673828125\n    // x = 0.1951358397491276264190673828125 * 2^16 = 12788.422393798828125 => 12788\n    let mult1_quantized = a1_quantized * b1_quantized;\n    assert(mult1_quantized.x == 12788);\n\n    // Test case 2: Large positive values\n    let a2 = 1152921504606846975; // Max value 2^60 - 1, original 1152921504606846975/2^16 = 17592186044415.9999847412109375\n    let b2 = 2; // original 2/2^16 = 0.000030517578125\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let mult2_quantized = a2_quantized * b2_quantized;\n    // 17592186044415.9999847412109375 * 0.000030517578125 = 536870911.9999999995343387126922607421875\n    // x/2^16 = value;  mult by 2^16 and truncate to whole number => x = 35184372088831\n    assert(mult2_quantized.x == 35184372088831);\n\n    // Test case 3: Large positive and small positive value\n    let a3 = 1152921504606846975; // Max value 2^60 - 1, original 1152921504606846975/2^16 = 17592186044415.9999847412109375\n    let b3 = 1; // original value 1/2^16 = 0.0000152587890625\n    let a3_quantized = Quantized { x: a3 };\n    let b3_quantized = Quantized { x: b3 };\n    // mul = 17592186044415.9999847412109375 * 0.0000152587890625 = 268435455.99999999976716935634613037109375\n    let mult3_quantized = a3_quantized * b3_quantized;\n    // mul * 2^16 = 17592186044415.9999847412109375\n    assert(mult3_quantized.x == 17592186044415);\n\n    // Test case 4: Positive and negative value\n    let a4 = 40000; // Original value 40000/2^16 = 0.6103515625\n    let b4 = -30000; // Original value -0.457763671875\n    let a4_quantized = Quantized { x: a4 };\n    let b4_quantized = Quantized { x: b4 };\n\n    // 0.6103515625 * -0.457763671875 = -0.2793967723846435546875\n    let mult4_quantized = a4_quantized * b4_quantized;\n    // -0.2793967723846435546875 * 2^16 = -18310.546875\n    assert(mult4_quantized.x == -18310);\n\n    // Test case 5: Both values negative\n    let a5 = -40000; // Original value -40000 / 2^16 = -0.6103515625\n    let b5 = -20000; // -0.30517578125\n    let a5_quantized = Quantized { x: a5 };\n    let b5_quantized = Quantized { x: b5 };\n    // -0.6103515625 *  -0.30517578125 = 0.186264514923095703125\n    let mult5_quantized = a5_quantized * b5_quantized;\n    // Expected result: 12207.03125\n    assert(mult5_quantized.x == 12207);\n}\n\n#[test]\nfn test_sub() {\n    let a = 1152921504606846975;\n    let b = 1152921504606846975;\n    let a_quantized = Quantized { x: a };\n    let b_quantized = Quantized { x: b };\n    let addition_quantized = a_quantized - b_quantized;\n    assert(addition_quantized.x == 0);\n\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = a1_quantized - b1_quantized;\n    assert(addition1_quantized.x == a1);\n\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = b1_quantized - a1_quantized;\n    // The result should be -a1, which means it is p - a1 in the field because\n    // of the wrap around.\n    let result = 21888242871839275222246405745257275088548364400416034343697051265071201648642;\n    assert(addition1_quantized.x == result);\n\n    let a2 = 12345;\n    let b2 = 67890;\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let addition2_quantized = a2_quantized + b2_quantized;\n    assert(addition2_quantized.x == (a2 + b2));\n}\n\n#[test]\nfn test_division() {\n    // Field modulus\n    let p: Field = 0;\n\n    // Test case 1: Division with small positive values\n    let a1 = Quantized { x: 98304 }; // Represents 1.5 (scaled)\n    let b1 = Quantized { x: 65536 }; // Represents 1.0 (scaled)\n    let result1 = a1 / b1; // 1.5 / 1.0 = 1.5\n    assert(result1.x == 98304); // Scaled result for 1.5\n\n    // Test case 2: Division resulting in a smaller value\n    let a2 = Quantized { x: 65536 }; // Represents 1.0 (scaled)\n    let b2 = Quantized { x: 98304 }; // Represents 1.5 (scaled)\n    let result2 = a2 / b2; // 1.0 / 1.5 = 0.666...\n    assert(result2.x == 43690); // Scaled result for ~0.6667\n\n    // Test case 3: Negative divided by positive\n    let a3 = Quantized { x: p - 98304 }; // Represents -1.5 (scaled)\n    let b3 = Quantized { x: 65536 }; // Represents 1.0 (scaled)\n    let result3 = a3 / b3; // -1.5 / 1.0 = -1.5\n    assert(result3.x == p - 98304); // Correctly negative\n\n    // Test case 4: Positive divided by negative\n    let a4 = Quantized { x: 98304 }; // Represents 1.5 (scaled)\n    let b4 = Quantized { x: p - 65536 }; // Represents -1.0 (scaled)\n    let result4 = a4 / b4; // 1.5 / -1.0 = -1.5\n    assert(result4.x == p - 98304); // Correctly negative\n\n    // Test case 5: Both negative values\n    let a5 = Quantized { x: p - 98304 }; // Represents -1.5 (scaled)\n    let b5 = Quantized { x: p - 65536 }; // Represents -1.0 (scaled)\n    let result5 = a5 / b5; // -1.5 / -1.0 = 1.5\n    assert(result5.x == 98304); // Scaled result for 1.5\n}\n\n#[test]\nfn test_large_values_division() {\n    // Field modulus\n    let p: Field = 0;\n\n    // Test case 1: Large positive values\n    let a1 = Quantized { x: 1152921504606846976 }; // Represents 17592186044416.0 (scaled)\n    let b1 = Quantized { x: 576460752303423488 }; // Represents 8796093022208.0 (scaled)\n    let result1 = a1 / b1; // 17592186044416.0 / 8796093022208.0 = 2.0\n    assert(result1.x == 131072); // Scaled result for 2.0\n\n    // Test case 2: Large positive divided by a larger positive\n    let a2 = Quantized { x: 576460752303423488 }; // Represents 8796093022208.0 (scaled)\n    let b2 = Quantized { x: 1152921504606846976 }; // Represents 17592186044416.0 (scaled)\n    let result2 = a2 / b2; // 8796093022208.0 / 17592186044416.0 = 0.5\n    assert(result2.x == 32768); // Scaled result for 0.5\n\n    // Test case 3: Large negative divided by large positive\n    let a3 = Quantized { x: p - 1152921504606846976 }; // Represents -17592186044416.0 (scaled)\n    let b3 = Quantized { x: 576460752303423488 }; // Represents 8796093022208.0 (scaled)\n    let result3 = a3 / b3; // -17592186044416.0 / 8796093022208.0 = -2.0\n    assert(result3.x == p - 131072); // Correctly negative\n\n    // Test case 4: Large positive divided by large negative\n    let a4 = Quantized { x: 1152921504606846976 }; // Represents 17592186044416.0 (scaled)\n    let b4 = Quantized { x: p - 576460752303423488 }; // Represents -8796093022208.0 (scaled)\n    let result4 = a4 / b4; // 17592186044416.0 / -8796093022208.0 = -2.0\n    assert(result4.x == p - 131072); // Correctly negative\n\n    // Test case 5: Both large negative values\n    let a5 = Quantized { x: p - 1152921504606846976 }; // Represents -17592186044416.0 (scaled)\n    let b5 = Quantized { x: p - 576460752303423488 }; // Represents -8796093022208.0 (scaled)\n    let result5 = a5 / b5; // -17592186044416.0 / -8796093022208.0 = 2.0\n    assert(result5.x == 131072); // Scaled result for 2.0\n}\n\n#[test(should_fail)]\nfn test_division_by_zero() -> Quantized {\n    Quantized { x: 65536 } / Quantized { x: 0 }\n}\n","path":"/Users/yurikonishijima/nargo/github.com/hashcloak/noir-fixed-point/main/src/quantized.nr"},"70":{"source":"use super::quantized::{is_negative, Quantized};\nuse std::field::bn254::decompose;\n\n// returns x * 2^-16, interpreted as an integer\n// Scaling down is needed for example after multiplying 2 Quantized values\npub fn scale_down(x: Field) -> Field {\n    let mut z = x;\n\n    let negative = is_negative(z);\n\n    z = negative\n        * (\n            21888242871839275222246405745257275088548364400416034343698204186575808495616 - z + 1\n                - z\n        )\n        + z;\n\n    // Division by 2^16, code as suggested by Tom French @TomAFrench\n    // Cast x to a u16 to preserve only the lowest 16 bits.\n    let lowest_16_bits = z as u16;\n\n    // Subtract off the lowest 16 bits so they are cleared.\n    let x_with_cleared_lower_bits = z - lowest_16_bits as Field;\n\n    // The lowest 16 bits are clear, `x_with_cleared_lower_bits` is divisible by `65536`,\n    // therefore field division is equivalent to integer division.\n    let mut new_x: Field = x_with_cleared_lower_bits / 65536;\n\n    // Flip back sign if the output is negative\n    new_x = negative\n        * (\n            21888242871839275222246405745257275088548364400416034343698204186575808495616 - new_x\n                + 1\n                - new_x\n        )\n        + new_x;\n\n    new_x\n}\n\n// Assert that number of bits <= bitsize\n// if quantized is negative, it count the bits backwards\npub fn assert_bitsize<let bitsize: u32>(q: Quantized) {\n    // Decomposes into two 128 bits chunks\n    let (_, higher_bytes) = decompose(q.x);\n    if higher_bytes == 0 {\n        // positive number\n        q.x.assert_max_bit_size::<bitsize>();\n    } else {\n        // negative number\n        (-q.x).assert_max_bit_size::<bitsize>();\n    }\n}\n\n#[test]\nfn test_assert_bitsize() {\n    // 4 bits\n    assert_bitsize::<4>(Quantized { x: 10 });\n    assert_bitsize::<4>(Quantized { x: -10 });\n\n    // 100 bits\n    assert_bitsize::<100>(Quantized { x: 1267650600228229401496703205375 });\n    assert_bitsize::<100>(Quantized { x: -1267650600228229401496703205375 });\n\n    // 127 bits\n    assert_bitsize::<127>(Quantized { x: 170141183460469231731687303715884105727 });\n    assert_bitsize::<127>(Quantized { x: -170141183460469231731687303715884105727 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize127() {\n    // 131 bits\n    assert_bitsize::<127>(Quantized { x: 1361129467683753853853498429727072845824 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize127_neg() {\n    // 131 bits\n    assert_bitsize::<127>(Quantized { x: -1361129467683753853853498429727072845824 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize1() {\n    // 4 bits\n    assert_bitsize::<3>(Quantized { x: 10 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize2() {\n    // 4 bits\n    assert_bitsize::<3>(Quantized { x: -10 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize3() {\n    // 100 bits\n    assert_bitsize::<99>(Quantized { x: 1267650600228229401496703205375 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize4() {\n    // 100 bits\n    assert_bitsize::<99>(Quantized { x: -1267650600228229401496703205375 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize5() {\n    // 127 bits\n    assert_bitsize::<126>(Quantized { x: 170141183460469231731687303715884105727 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize6() {\n    // 127 bits\n    assert_bitsize::<126>(Quantized { x: -170141183460469231731687303715884105727 });\n}\n","path":"/Users/yurikonishijima/nargo/github.com/hashcloak/noir-mpc-ml/v0.1.2/src/utils.nr"}},"names":["main"],"brillig_names":["print_unconstrained","print_unconstrained","decompose_hint","lte_hint","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","unconstrained_div","print_unconstrained","print_unconstrained","directive_invert","directive_to_radix","directive_integer_quotient"]}
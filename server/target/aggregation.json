{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":7534405734956140548,"abi":{"parameters":[{"name":"submitted_models","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"training_prover::train::MultiClassTrainedModel","fields":[{"name":"models","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"training_prover::train::TrainedModelPerClass","fields":[{"name":"weights","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aggregation_prover::noir_mpc_ml::quantized::Quantized","fields":[{"name":"x","type":{"kind":"field"}}]}}},{"name":"bias","type":{"kind":"struct","path":"aggregation_prover::noir_mpc_ml::quantized::Quantized","fields":[{"name":"x","type":{"kind":"field"}}]}}]}}},{"name":"n_samples","type":{"kind":"field"}}]}},"visibility":"private"}],"return_type":null,"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"9174856516895611197":{"error_kind":"string","string":"Division by zero is not allowed."},"16646908709298801123":{"error_kind":"string","string":"attempt to subtract with underflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"30":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    /// Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    /// Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"60":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse crate::static_assert;\nuse super::{convert::AsPrimitive, default::Default};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        static_assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                /// Safety: optionally adds 32 and then check (below) the result is in 'a..f' range\n                let ascii =\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        /// Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n        /// Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        /// Safety: cf div() above\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nimpl Default for U128 {\n    fn default() -> Self {\n        U128::zero()\n    }\n}\n\nmod tests {\n    use crate::default::Default;\n    use crate::ops::Not;\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        /// Safety: testing context\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n\n    #[test]\n    fn test_default() {\n        assert_eq(U128::default(), U128::zero());\n    }\n}\n","path":"std/uint128.nr"},"62":{"source":"use aggregation_prover::aggregate::aggregate;\nuse training_prover::train::MultiClassTrainedModel;\n\npub fn main(submitted_models: [MultiClassTrainedModel<4, 3>; 3]) {\n    let aggregated_model = aggregate(submitted_models);\n    println(\"aggregated model: \");\n    println((aggregated_model))\n}\n","path":"/Users/yurikonishijima/Development/vfl-demo/server/src/main.nr"},"63":{"source":"use noir_fixed_point::quantized::Quantized as QuantizedWithDiv; // this has division function\nuse noir_mpc_ml::quantized::Quantized;\nuse noir_mpc_ml::utils::{assert_bitsize, scale_down};\nuse training_prover::train::MultiClassTrainedModel;\nuse training_prover::train::TrainedModelPerClass;\n\n// New struct definition using QuantizedWithDiv, which has division implementation\n// We switch form the original Quantized struct to this struct becuase we need to do division at the end for weighted average calculation\npub struct FinalTrainedModelPerClass<let M: u32> {\n    pub weights: [QuantizedWithDiv; M],\n    pub bias: QuantizedWithDiv,\n}\n\n// multiclass model\npub struct FinalMultiClassTrainedModel<let M: u32, let C: u32> {\n    pub models: [FinalTrainedModelPerClass<M>; C],\n    pub n_samples: Field,\n}\n\npub fn castToQuantizedWithDiv(q: Quantized) -> QuantizedWithDiv {\n    QuantizedWithDiv { x: q.x }\n}\n\npub fn aggregate<let M: u32, let C: u32, let L: u32>(\n    submitted_models: [MultiClassTrainedModel<M, C>; L],\n) -> FinalMultiClassTrainedModel<M, C> {\n    // Initialize temporary empty model to accumulate weighted sums for weights and bias\n    // We use original Quantized struct\n    let mut temp_aggregated_model: MultiClassTrainedModel<M, C> = MultiClassTrainedModel {\n        models: [\n            TrainedModelPerClass { weights: [Quantized::zero(); M], bias: Quantized::zero() }; C\n        ],\n        n_samples: Field::from(0),\n    };\n\n    // Loop over each model submitted by clients, stored in `submitted_models`\n    for client_idx in 0..L {\n        // println(\"client_idx\");\n        // println(client_idx);\n        let model = submitted_models[client_idx];\n        let unscaled_n_samples = Quantized::new(model.n_samples);\n\n        // n_samples is 20 = 5 bits at max for this demo\n        // println(\"unscaled n_samples\");\n        // println(unscaled_n_samples);\n\n        assert_bitsize::<5>(unscaled_n_samples);\n        temp_aggregated_model.n_samples += unscaled_n_samples.x;\n\n        // println(\"total number of samples summed up so far\");\n        // println(temp_aggregated_model.n_samples);\n\n        // For each class in this model\n        for class_idx in 0..C {\n            let current = model.models[class_idx];\n\n            // println(\"class_idx\");\n            // println(class_idx);\n            // println(current);\n\n            // Weighted sum for each weight\n            for weight_idx in 0..M {\n                // println(\"weight\");\n                // println(current.weights[weight_idx]);\n                // since n_samples is already constrained to be <= 5 bits,\n                // weights can be 125 - 5 = 120 bits at maximum\n                let unscaled_weight = Quantized { x: scale_down(current.weights[weight_idx].x) };\n                // println(\"unscaled_weight\");\n                // println(unscaled_weight);\n                assert_bitsize::<120>(unscaled_weight);\n\n                let scaled_down_weighted_sum_for_weights = unscaled_weight * unscaled_n_samples;\n\n                // println(\n                //     \"scaled down weighted sum for weights = unscaled weight * unscaled n_sampled / 2^16\",\n                // );\n                // println(scaled_down_weighted_sum_for_weights);\n\n                // NOTE: multiplication between `Quantized` outputs a result devided by 2^16 because it's intended to be\n                // performed on fixed point numbers. However, since we are passing unscaled values here (in order to pass max-bitsize assertion for safe multiplication), we have to rescale the result by 2^16.\n                // the other operand `weights` must be 125 - 16 = 109 bits at maximum\n                assert_bitsize::<109>(scaled_down_weighted_sum_for_weights);\n                let weighted_sum = scaled_down_weighted_sum_for_weights * Quantized::new(65535);\n\n                // max input bit size for safe addition: 125 bits\n                assert_bitsize::<125>(weighted_sum);\n                temp_aggregated_model.models[class_idx].weights[weight_idx] += weighted_sum;\n            }\n\n            let unscaled_bias = Quantized { x: scale_down(current.bias.x) };\n\n            // since n_samples is already constrained to be <= 5 bits,\n            // bias can be 125 - 5 = 120 bits at maximum for safe multiplication\n            assert_bitsize::<120>(unscaled_bias);\n            let scaled_down_weighted_sum_for_bias = unscaled_bias * unscaled_n_samples;\n\n            // NOTE: multiplication between `Quantized` outputs a result devided by 2^16 because it's intended to be\n            // performed on fixed point numbers. However, since we are passing unscaled values here (in order to pass max-bitsize assertion for safe multiplication), we have to rescale the result by 2^16.\n            // the other operand `weights` must be 125 - 16 = 109 bits at maximum\n            assert_bitsize::<109>(scaled_down_weighted_sum_for_bias);\n            let weighted_sum_for_bias = scaled_down_weighted_sum_for_bias * Quantized::new(65535);\n\n            // max input bit size for safe addition: 125 bits\n            assert_bitsize::<125>(weighted_sum_for_bias);\n            temp_aggregated_model.models[class_idx].bias += weighted_sum_for_bias;\n        }\n    }\n\n    // println(\"temp aggeregated model: \");\n    // println(temp_aggregated_model);\n\n    // Initialize empty model to be returned as a final aggregated model\n    // We need to do division so we'll use QuantizedWithDiv Struct here\n    let mut aggregated_model: FinalMultiClassTrainedModel<M, C> = FinalMultiClassTrainedModel {\n        models: [\n            FinalTrainedModelPerClass {\n                weights: [QuantizedWithDiv::zero(); M],\n                bias: QuantizedWithDiv::zero(),\n            }; C\n        ],\n        n_samples: temp_aggregated_model.n_samples,\n    };\n\n    // Divide all sums by total_samples to get weighted average\n    // Since original noir_mpc_ml::quantized::Quantized does not implement division,\n    // let's it to noir_fixed_point::quantized::Quantized first which has division function implemented.\n    for class_idx in 0..C {\n        for weight_idx in 0..M {\n            // println(\"weight_idx\");\n            // println(weight_idx);\n            aggregated_model.models[class_idx].weights[weight_idx] = castToQuantizedWithDiv(\n                temp_aggregated_model.models[class_idx].weights[weight_idx],\n            )\n                / QuantizedWithDiv::new(temp_aggregated_model.n_samples);\n        }\n        aggregated_model.models[class_idx].bias = castToQuantizedWithDiv(\n            temp_aggregated_model.models[class_idx].bias,\n        )\n            / QuantizedWithDiv::new(temp_aggregated_model.n_samples);\n    }\n\n    aggregated_model\n}\n\n","path":"/Users/yurikonishijima/Development/vfl-demo/aggregation_prover/src/aggregate.nr"},"66":{"source":"use std::cmp::Ordering;\nuse std::field::bn254::decompose;\nuse std::ops::{Add, Div, Mul, Sub};\n\n// IMPORTANT: This library is designed to work with a fixed scale factor of 2^16\n// See further explanation in the `Quantized` struct comments below.\nglobal scale: Field = 65536; // 2^16\n\n// A signed fixed-point number `x` is represented in a single Field element.\n//\n// Representation Overview:\n// A Field element is a type with 254 bits.\n// We only use the first 126 or the last 126 bits.\n// A positive number is within the first 126 bits.\n// A negative numbers is within the last 126 bits.\n// The \"middle\" 2 bits that are left over, should not be used.\n// - Positive values have bits set in the lower part: |x_0,x_1,x_2,..,x_125, ... ,_,_,_,_|\n// - Negative values have bits set in the upper part: |_,_,_,_, .. x_128,x_129,..,x_253|\n// So following above visual, x_126 and x_127 MUST be 0\n//\n// Modular arithmetic ensures correct handling of signed fixed-point numbers by wrapping\n// values around the field's modulus. For example, subtracting 5 from 3 in a field with\n// modulus `p` results in (3 - 5) mod p = p - 2, representing -2. This behavior allows\n// negative values to be correctly encoded in the field's upper range.\n//\n// Scaling:\n// Since fields do not inherently support decimal values, the fixed-point representation\n// uses a scale of 2^-16. This means that:\n// - `Quantized { x: 1 }` represents the value 1/2^16.\n// - To represent an original value, divide it by the scale, truncate, and store the result.\n// Example:\n// - Original value: 0.001\n// - Scaled value: 0.001 * 2^16 = 65.536\n// - Truncated result: 65 (stored as `Quantized { x: 65 }`)\n//\n// Overflow and overflow prevention:\n// To make sure the arithmetic performed on a value will not overflow, the library contains\n// bitsize checks that prevent numbers from growing larger than 126 bits. More concretely:\n// - multiplication: inputs must have bitsize <= 63\n// - addition: inputs must have bitsize <=125\n// - subtraction: inputs must have bitsize <=125\n//\n// Conversion Steps to `Quantized`:\n// 1. Check if the original value `x` is negative. If negative, use (p - |x|), where `p` is\n//    the field's prime modulus. Otherwise, proceed with `x`.\n// 2. Multiply the value by the scale factor (e.g., 2^16).\n// 3. Store the scaled value in a `Quantized` struct.\n//\n// Prime Modulus:\n// The field modulus `p` used in this implementation is:\n//   p = 21888242871839275222246405745257275088548364400416034343698204186575808495617\n// This prime comes from the Barretenberg backend.\npub struct Quantized {\n    pub x: Field,\n}\n\n// returns 1 for a negative element, 0 for a positive element\n// A Quantized element is negative if the upper bits are set, so this is what we check for.\n// NOTE: this asserts the field contains has maximum 126 bits. If the element contains more than\n// 126 bits either way, this function cannot correctly indicate whether it's negative or not.\nfn is_negative(x: Field) -> Field {\n    let (lower_bytes, higher_bytes) = decompose(x);\n    if higher_bytes == 0 {\n        // Make sure the number is not overflowing the 126 bits\n        x.assert_max_bit_size::<126>();\n        0\n    } else {\n        1\n    }\n}\n\nimpl Quantized {\n    // Assert that number of bits <= bitsize\n    // if quantized is negative, it counts the bits backwards\n    // NOTE: this works only for bitsize <= 126, because decompose gives us\n    // 128 and 126 bits\n    pub fn assert_bitsize<let bitsize: u32>(self: Self) {\n        // Decomposes into two 128 bits chunks\n        let (lower_bytes, higher_bytes) = decompose(self.x);\n        if higher_bytes == 0 {\n            // positive number\n            self.x.assert_max_bit_size::<bitsize>();\n        } else {\n            // negative number\n            (-self.x).assert_max_bit_size::<bitsize>();\n        }\n    }\n\n    pub fn zero() -> Self {\n        Quantized { x: 0 }\n    }\n\n    pub fn new(x: Field) -> Self {\n        let res = Self { x: x };\n        res.assert_bitsize::<126>();\n        res\n    }\n\n    fn add(self: Self, other: Self) -> Self {\n        // To prevent overflow, allow max 125 bits for both inputs\n        self.assert_bitsize::<125>();\n        other.assert_bitsize::<125>();\n        Quantized { x: self.x + other.x } // if one is negative, this wraps around automatically\n    }\n\n    fn sub(self: Self, other: Self) -> Self {\n        // To prevent overflow, allow max 125 bits for both inputs\n        self.assert_bitsize::<125>();\n        other.assert_bitsize::<125>();\n        Quantized { x: self.x - other.x }\n    }\n\n    fn mul(self: Self, other: Self) -> Self {\n        // To prevent overflow, allow max 63 bits for both inputs\n        // Perform multiplication of the underlying field elements\n        // This doubles the scale.\n        self.assert_bitsize::<63>();\n        other.assert_bitsize::<63>();\n        let mut temp: Field = self.x * other.x;\n\n        // Scale down by dividing by 2^16\n        // Since the scale is a multiple of 2^8, this will scale it down correctly.\n        // Note that we have to take care of the case that the value is negative; in that case we flip the sign\n        // temporarily, and flip it back at the end. Otherwise the division doesn't work\n\n        // Check whether we're working with a negative value\n        let negative = is_negative(temp);\n\n        temp = negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616 - temp\n                    + 1\n                    - temp\n            )\n            + temp;\n\n        // Division by 2^16, code as suggested by Tom French @TomAFrench\n        // Cast x to a u16 to preserve only the lowest 16 bits.\n        let lowest_16_bits = temp as u16;\n\n        // Subtract off the lowest 16 bits so they are cleared.\n        let temp_with_cleared_lower_bits = temp - lowest_16_bits as Field;\n\n        // The lowest 16 bits are clear, `x_with_cleared_lower_bits` is divisible by `65536`,\n        // therefore field division is equivalent to integer division.\n        let mut final_res: Field = temp_with_cleared_lower_bits / 65536;\n\n        // If the result was originally negative, flip the sign back\n        final_res = negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616\n                    - final_res\n                    + 1\n                    - final_res\n            )\n            + final_res;\n\n        // Return the result as a new Quantized instance\n        Quantized { x: final_res }\n    }\n\n    fn div(self: Self, other: Self) -> Self {\n        // Ensure `other` is not zero\n        assert(other.x != 0, \"Division by zero is not allowed.\");\n        self.assert_bitsize::<109>(); // will be multiplied by scale later, so we allow 126-17 bits\n        other.assert_bitsize::<126>(); // standard bitsize check\n        // Flip signs of numerator and denominator if negative, work with their absolute values\n        let mut numerator = self.x;\n        let mut denominator = other.x;\n\n        let mut numerator_is_negative = is_negative(numerator);\n        let mut denominator_is_negative = is_negative(denominator);\n\n        numerator = numerator_is_negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616\n                    - numerator\n                    + 1\n                    - numerator\n            )\n            + numerator;\n\n        denominator = denominator_is_negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616\n                    - denominator\n                    + 1\n                    - denominator\n            )\n            + denominator;\n\n        // Scale numerator before division\n        let scaled_numerator = numerator * scale;\n\n        // Cast to U128 for division\n        let scaled_numerator_u128 = U128::from_le_bytes(scaled_numerator.to_le_bytes());\n        let denominator_u128 = U128::from_le_bytes(denominator.to_le_bytes());\n\n        // Perform the division in U128\n        let result_u128 = scaled_numerator_u128 / denominator_u128;\n\n        // Cast back to Field\n        let mut result = Field::from_le_bytes(result_u128.to_le_bytes());\n\n        // Determine the sign of the result\n        let result_is_negative = numerator_is_negative + denominator_is_negative == 1;\n\n        // If result is negative, flip sign back\n        if result_is_negative {\n            result = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - result\n                + 1;\n        }\n\n        Quantized { x: result }\n    }\n}\n\nimpl Add for Quantized {\n    fn add(self, other: Self) -> Self {\n        self.add(other)\n    }\n}\n\nimpl Sub for Quantized {\n    fn sub(self, other: Self) -> Self {\n        self.sub(other)\n    }\n}\n\nimpl Mul for Quantized {\n    fn mul(self, other: Self) -> Self {\n        self.mul(other)\n    }\n}\n\nimpl Div for Quantized {\n    fn div(self, other: Self) -> Self {\n        self.div(other)\n    }\n}\n\nimpl Ord for Quantized {\n    fn cmp(self: Self, other: Self) -> Ordering {\n        if self.x == other.x {\n            Ordering::equal()\n        } else {\n            let (_, sub_hi) = decompose(self.x - other.x);\n            if sub_hi == 0 {\n                Ordering::greater()\n            } else {\n                Ordering::less()\n            }\n        }\n    }\n}\n\n#[test]\nfn test_order() {\n    // Test 1: comparison between positive and negative value.\n    // a = 0.2 and b = -0.2\n    let a: Field = 13107;\n    let a_quantized = Quantized { x: a };\n    let b = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized > b_quantized);\n\n    // Test 2: comparison between two possitive numbers.\n    // a = 1 and b = 0.2.\n    // Then a * 2^16 = 65536\n    let a: Field = 65536;\n    let a_quantized = Quantized { x: a };\n    let b = 13107;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized > b_quantized);\n\n    // Test 3: comparison between two possitive numbers where the roles are\n    // inverted.\n    // a = 1 and b = 1.2.\n    // Then a * 2^16 = 65536\n    let a: Field = 65536;\n    let a_quantized = Quantized { x: a };\n    let b = 78643;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized < b_quantized);\n\n    // Test 4: comparison between two negative numbers.\n    // a = -1 and b = -0.2.\n    // Then a * 2^16 = -65536 therefore taking mod p we obtain that\n    // a = 21888242871839275222246405745257275088548364400416034343698204186575808430081\n    // b = 21888242871839275222246405745257275088548364400416034343698204186575808482510\n    let a: Field = 21888242871839275222246405745257275088548364400416034343698204186575808430081;\n    let a_quantized = Quantized { x: a };\n    let b = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized < b_quantized);\n\n    // 21888242871839275222246405745257275088548364400416034343698204186575808495617 - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efff8001\n    // - 32768\n    // 21888242871839275222246405745257275088548364400416034343698204186575808495617 - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effb0001\n    let a = Quantized { x: 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efff8001 };\n    // - 327680\n    let b = Quantized { x: 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effb0001 };\n    assert(a > b);\n}\n\n#[test]\nfn test_is_negative() {\n    // Test 1: checking if it's negative for a positive value.\n    // a = 0.2   =>   0.2 * 2^16 = 13107\n    let a: Field = 13107;\n    assert(is_negative(a) == 0);\n\n    // Test 2: checking if it's negative for a negative value.\n    // a = -0.2  =>   -0.2 * 2^16 = -13107\n    // Hence, -13107 mod p = p - 13107 = 21888242871839275222246405745257275088548364400416034343698204186575808482510\n    let a = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    assert(is_negative(a) == 1);\n\n    // Test 3: checing if it's negative for a negative larger value.\n    // a = -1301.34  =>  -1301.34 * 2^16 = -85284618\n    // Hence, -85284618 mod p = p - 85284618 = 21888242871839275222246405745257275088548364400416034343698204186575723210999\n    let a = 21888242871839275222246405745257275088548364400416034343698204186575723210999;\n    assert(is_negative(a) == 1);\n}\n\n#[test]\nfn test_add() {\n    // Max value 2^60-1, positive and negative\n    let a = 1152921504606846975;\n    let b = -1152921504606846975;\n    let a_quantized = Quantized { x: a };\n    let b_quantized = Quantized { x: b };\n    let addition_quantized = a_quantized + b_quantized;\n    assert(addition_quantized.x == 0);\n\n    // Test case 1: Max value 2^60 - 1, positive and zero\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = a1_quantized + b1_quantized;\n    assert(addition1_quantized.x == a1);\n\n    // Test case 2: Small positive values\n    let a2 = 12345;\n    let b2 = 67890;\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let addition2_quantized = a2_quantized + b2_quantized;\n    assert(addition2_quantized.x == (a2 + b2));\n\n    // Test case 3: Positive and negative values resulting in a non-zero positive result\n    let a3 = 50000;\n    let b3 = -30000;\n    let a3_quantized = Quantized { x: a3 };\n    let b3_quantized = Quantized { x: b3 };\n    let addition3_quantized = a3_quantized + b3_quantized;\n    assert(addition3_quantized.x == 20000);\n\n    // Test case 4: Positive and negative values resulting in a non-zero negative result\n    let a4 = 30000;\n    let b4 = -50000;\n    let a4_quantized = Quantized { x: a4 };\n    let b4_quantized = Quantized { x: b4 };\n    let addition4_quantized = a4_quantized + b4_quantized;\n    assert(addition4_quantized.x == -20000);\n\n    // Test case 5: Add two negative values resulting in a negative value\n    let a5 = -40000;\n    let b5 = -20000;\n    let a5_quantized = Quantized { x: a5 };\n    let b5_quantized = Quantized { x: b5 };\n    let addition5_quantized = a5_quantized + b5_quantized;\n    assert(addition5_quantized.x == -60000);\n}\n\n#[test]\nfn test_mul() {\n    // Test case 1: Small positive values\n    let a1 = 12345; // original value 12345/2^16 = 0.1883697509765625\n    let b1 = 67890; // original value 67890/2^16 = 1.035919189453125\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    // new value = 0.1883697509765625 * 1.035919189453125 = 0.1951358397491276264190673828125\n    // x = 0.1951358397491276264190673828125 * 2^16 = 12788.422393798828125 => 12788\n    let mult1_quantized = a1_quantized * b1_quantized;\n    assert(mult1_quantized.x == 12788);\n\n    // Test case 2: Large positive values\n    let a2 = 1152921504606846975; // Max value 2^60 - 1, original 1152921504606846975/2^16 = 17592186044415.9999847412109375\n    let b2 = 2; // original 2/2^16 = 0.000030517578125\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let mult2_quantized = a2_quantized * b2_quantized;\n    // 17592186044415.9999847412109375 * 0.000030517578125 = 536870911.9999999995343387126922607421875\n    // x/2^16 = value;  mult by 2^16 and truncate to whole number => x = 35184372088831\n    assert(mult2_quantized.x == 35184372088831);\n\n    // Test case 3: Large positive and small positive value\n    let a3 = 1152921504606846975; // Max value 2^60 - 1, original 1152921504606846975/2^16 = 17592186044415.9999847412109375\n    let b3 = 1; // original value 1/2^16 = 0.0000152587890625\n    let a3_quantized = Quantized { x: a3 };\n    let b3_quantized = Quantized { x: b3 };\n    // mul = 17592186044415.9999847412109375 * 0.0000152587890625 = 268435455.99999999976716935634613037109375\n    let mult3_quantized = a3_quantized * b3_quantized;\n    // mul * 2^16 = 17592186044415.9999847412109375\n    assert(mult3_quantized.x == 17592186044415);\n\n    // Test case 4: Positive and negative value\n    let a4 = 40000; // Original value 40000/2^16 = 0.6103515625\n    let b4 = -30000; // Original value -0.457763671875\n    let a4_quantized = Quantized { x: a4 };\n    let b4_quantized = Quantized { x: b4 };\n\n    // 0.6103515625 * -0.457763671875 = -0.2793967723846435546875\n    let mult4_quantized = a4_quantized * b4_quantized;\n    // -0.2793967723846435546875 * 2^16 = -18310.546875\n    assert(mult4_quantized.x == -18310);\n\n    // Test case 5: Both values negative\n    let a5 = -40000; // Original value -40000 / 2^16 = -0.6103515625\n    let b5 = -20000; // -0.30517578125\n    let a5_quantized = Quantized { x: a5 };\n    let b5_quantized = Quantized { x: b5 };\n    // -0.6103515625 *  -0.30517578125 = 0.186264514923095703125\n    let mult5_quantized = a5_quantized * b5_quantized;\n    // Expected result: 12207.03125\n    assert(mult5_quantized.x == 12207);\n}\n\n#[test]\nfn test_sub() {\n    let a = 1152921504606846975;\n    let b = 1152921504606846975;\n    let a_quantized = Quantized { x: a };\n    let b_quantized = Quantized { x: b };\n    let addition_quantized = a_quantized - b_quantized;\n    assert(addition_quantized.x == 0);\n\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = a1_quantized - b1_quantized;\n    assert(addition1_quantized.x == a1);\n\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = b1_quantized - a1_quantized;\n    // The result should be -a1, which means it is p - a1 in the field because\n    // of the wrap around.\n    let result = 21888242871839275222246405745257275088548364400416034343697051265071201648642;\n    assert(addition1_quantized.x == result);\n\n    let a2 = 12345;\n    let b2 = 67890;\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let addition2_quantized = a2_quantized + b2_quantized;\n    assert(addition2_quantized.x == (a2 + b2));\n}\n\n#[test]\nfn test_division() {\n    // Field modulus\n    let p: Field = 0;\n\n    // Test case 1: Division with small positive values\n    let a1 = Quantized { x: 98304 }; // Represents 1.5 (scaled)\n    let b1 = Quantized { x: 65536 }; // Represents 1.0 (scaled)\n    let result1 = a1 / b1; // 1.5 / 1.0 = 1.5\n    assert(result1.x == 98304); // Scaled result for 1.5\n\n    // Test case 2: Division resulting in a smaller value\n    let a2 = Quantized { x: 65536 }; // Represents 1.0 (scaled)\n    let b2 = Quantized { x: 98304 }; // Represents 1.5 (scaled)\n    let result2 = a2 / b2; // 1.0 / 1.5 = 0.666...\n    assert(result2.x == 43690); // Scaled result for ~0.6667\n\n    // Test case 3: Negative divided by positive\n    let a3 = Quantized { x: p - 98304 }; // Represents -1.5 (scaled)\n    let b3 = Quantized { x: 65536 }; // Represents 1.0 (scaled)\n    let result3 = a3 / b3; // -1.5 / 1.0 = -1.5\n    assert(result3.x == p - 98304); // Correctly negative\n\n    // Test case 4: Positive divided by negative\n    let a4 = Quantized { x: 98304 }; // Represents 1.5 (scaled)\n    let b4 = Quantized { x: p - 65536 }; // Represents -1.0 (scaled)\n    let result4 = a4 / b4; // 1.5 / -1.0 = -1.5\n    assert(result4.x == p - 98304); // Correctly negative\n\n    // Test case 5: Both negative values\n    let a5 = Quantized { x: p - 98304 }; // Represents -1.5 (scaled)\n    let b5 = Quantized { x: p - 65536 }; // Represents -1.0 (scaled)\n    let result5 = a5 / b5; // -1.5 / -1.0 = 1.5\n    assert(result5.x == 98304); // Scaled result for 1.5\n}\n\n#[test]\nfn test_large_values_division() {\n    // Field modulus\n    let p: Field = 0;\n\n    // Test case 1: Large positive values\n    let a1 = Quantized { x: 1152921504606846976 }; // Represents 17592186044416.0 (scaled)\n    let b1 = Quantized { x: 576460752303423488 }; // Represents 8796093022208.0 (scaled)\n    let result1 = a1 / b1; // 17592186044416.0 / 8796093022208.0 = 2.0\n    assert(result1.x == 131072); // Scaled result for 2.0\n\n    // Test case 2: Large positive divided by a larger positive\n    let a2 = Quantized { x: 576460752303423488 }; // Represents 8796093022208.0 (scaled)\n    let b2 = Quantized { x: 1152921504606846976 }; // Represents 17592186044416.0 (scaled)\n    let result2 = a2 / b2; // 8796093022208.0 / 17592186044416.0 = 0.5\n    assert(result2.x == 32768); // Scaled result for 0.5\n\n    // Test case 3: Large negative divided by large positive\n    let a3 = Quantized { x: p - 1152921504606846976 }; // Represents -17592186044416.0 (scaled)\n    let b3 = Quantized { x: 576460752303423488 }; // Represents 8796093022208.0 (scaled)\n    let result3 = a3 / b3; // -17592186044416.0 / 8796093022208.0 = -2.0\n    assert(result3.x == p - 131072); // Correctly negative\n\n    // Test case 4: Large positive divided by large negative\n    let a4 = Quantized { x: 1152921504606846976 }; // Represents 17592186044416.0 (scaled)\n    let b4 = Quantized { x: p - 576460752303423488 }; // Represents -8796093022208.0 (scaled)\n    let result4 = a4 / b4; // 17592186044416.0 / -8796093022208.0 = -2.0\n    assert(result4.x == p - 131072); // Correctly negative\n\n    // Test case 5: Both large negative values\n    let a5 = Quantized { x: p - 1152921504606846976 }; // Represents -17592186044416.0 (scaled)\n    let b5 = Quantized { x: p - 576460752303423488 }; // Represents -8796093022208.0 (scaled)\n    let result5 = a5 / b5; // -17592186044416.0 / -8796093022208.0 = 2.0\n    assert(result5.x == 131072); // Scaled result for 2.0\n}\n\n#[test(should_fail)]\nfn test_division_by_zero() -> Quantized {\n    Quantized { x: 65536 } / Quantized { x: 0 }\n}\n","path":"/Users/yurikonishijima/Development/noir-fixed-point/src/quantized.nr"},"69":{"source":"use std::cmp::Ordering;\nuse std::field::bn254::decompose;\nuse std::ops::{Add, Div, Mul, Sub};\n\n// IMPORTANT: This library is designed to work with a scale factor of 2^(8*factor).\nglobal scale: Field = 65536; // 2^(8*2) = 2^16\n\n// NOTE: this is a version of the noir-fixed-point library without overflow checks\n// Ref: https://github.com/hashcloak/noir-fixed-point/\n// The ML functionality of this larger library take care of the necessary overflow checks\n// which makes the whole more performant.\n// This version also doesn't contain the `div` function, since it's not needed.\n\n// A signed fixed-point number `x` is represented in a single Field element.\n//\n// Representation Overview:\n// A Field element is a type with 254 bits.\n// We only use the first 126 or the last 126 bits.\n// A positive number is within the first 126 bits.\n// A negative numbers is within the last 126 bits.\n// The \"middle\" 2 bits that are left over, should not be used.\n// - Positive values have bits set in the lower part: |x_0,x_1,x_2,..,x_125, ... ,_,_,_,_|\n// - Negative values have bits set in the upper part: |_,_,_,_, .. x_128,x_129,..,x_253|\n// So following above visual, x_126 and x_127 MUST be 0\n//\n// Modular arithmetic ensures correct handling of signed fixed-point numbers by wrapping\n// values around the field's modulus. For example, subtracting 5 from 3 in a field with\n// modulus `p` results in (3 - 5) mod p = p - 2, representing -2. This behavior allows\n// negative values to be correctly encoded in the field's upper range.\n//\n// Scaling:\n// Since fields do not inherently support decimal values, the fixed-point representation\n// uses a scale of 2^-16. This means that:\n// - `Quantized { x: 1 }` represents the value 1/2^16.\n// - To represent an original value, divide it by the scale, truncate, and store the result.\n// Example:\n// - Original value: 0.001\n// - Scaled value: 0.001 * 2^16 = 65.536\n// - Truncated result: 65 (stored as `Quantized { x: 65 }`)\n//\n// Conversion Steps to `Quantized`:\n// 1. Check if the original value `x` is negative. If negative, use (p - |x|), where `p` is\n//    the field's prime modulus. Otherwise, proceed with `x`.\n// 2. Multiply the value by the scale factor (e.g., 2^16).\n// 3. Store the scaled value in a `Quantized` struct.\n//\n// Prime Modulus:\n// The field modulus `p` used in this implementation is:\n//   p = 21888242871839275222246405745257275088548364400416034343698204186575808495617\n// This prime comes from the Barretenberg backend.\npub struct Quantized {\n    pub x: Field,\n}\n\n// returns 1 for a negative element, 0 for a positive element\n// A Quantized element is negative if the upper bits are set, so this is what we check for.\n// NOTE: Make sure that the value that the field contains has maximum 126 bits.\n// If the element contains more than 126 bits either way, this function cannot correctly indicate\n// whether it's negative or not.\npub fn is_negative(x: Field) -> Field {\n    let (_, higher_bytes) = decompose(x);\n    if higher_bytes == 0 {\n        0\n    } else {\n        1\n    }\n}\n\nimpl Quantized {\n\n    pub fn zero() -> Self {\n        Quantized { x: 0 }\n    }\n\n    pub fn new(x: Field) -> Self {\n        Self { x: x }\n    }\n\n    fn add(self: Self, other: Self) -> Self {\n        Quantized { x: self.x + other.x } // if one is negative, this wraps around automatically\n    }\n\n    fn sub(self: Self, other: Self) -> Self {\n        Quantized { x: self.x - other.x }\n    }\n\n    fn mul(self: Self, other: Self) -> Self {\n        let mut temp: Field = self.x * other.x;\n\n        // Scale down by dividing by 2^16\n        // Since the scale is a multiple of 2^8, this will scale it down correctly.\n        // Note that we have to take care of the case that the value is negative; in that case we flip the sign\n        // temporarily, and flip it back at the end. Otherwise the division doesn't work\n\n        // Check whether we're working with a negative value\n        let negative = is_negative(temp);\n\n        temp = negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616 - temp\n                    + 1\n                    - temp\n            )\n            + temp;\n\n        // Division by 2^16, code as suggested by Tom French @TomAFrench\n        // Cast x to a u16 to preserve only the lowest 16 bits.\n        let lowest_16_bits = temp as u16;\n\n        // Subtract off the lowest 16 bits so they are cleared.\n        let temp_with_cleared_lower_bits = temp - lowest_16_bits as Field;\n\n        // The lowest 16 bits are clear, `x_with_cleared_lower_bits` is divisible by `65536`,\n        // therefore field division is equivalent to integer division.\n        let mut final_res: Field = temp_with_cleared_lower_bits / 65536;\n\n        // If the result was originally negative, flip the sign back\n        final_res = negative\n            * (\n                21888242871839275222246405745257275088548364400416034343698204186575808495616\n                    - final_res\n                    + 1\n                    - final_res\n            )\n            + final_res;\n\n        // Return the result as a new Quantized instance\n        Quantized { x: final_res }\n    }\n}\n\nimpl Add for Quantized {\n    fn add(self, other: Self) -> Self {\n        self.add(other)\n    }\n}\n\nimpl Sub for Quantized {\n    fn sub(self, other: Self) -> Self {\n        self.sub(other)\n    }\n}\n\nimpl Mul for Quantized {\n    fn mul(self, other: Self) -> Self {\n        self.mul(other)\n    }\n}\n\nimpl Ord for Quantized {\n    fn cmp(self: Self, other: Self) -> Ordering {\n        if self.x == other.x {\n            Ordering::equal()\n        } else {\n            let (_, sub_hi) = decompose(self.x - other.x);\n            if (sub_hi == 0) {\n                Ordering::greater()\n            } else {\n                Ordering::less()\n            }\n        }\n    }\n}\n\n#[test]\nfn test_order() {\n    // Test 1: comparison between positive and negative value.\n    // a = 0.2 and b = -0.2\n    let a: Field = 13107;\n    let a_quantized = Quantized { x: a };\n    let b = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized > b_quantized);\n\n    // Test 2: comparison between two possitive numbers.\n    // a = 1 and b = 0.2.\n    // Then a * 2^16 = 65536\n    let a: Field = 65536;\n    let a_quantized = Quantized { x: a };\n    let b = 13107;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized > b_quantized);\n\n    // Test 3: comparison between two possitive numbers where the roles are\n    // inverted.\n    // a = 1 and b = 1.2.\n    // Then a * 2^16 = 65536\n    let a: Field = 65536;\n    let a_quantized = Quantized { x: a };\n    let b = 78643;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized < b_quantized);\n\n    // Test 4: comparison between two negative numbers.\n    // a = -1 and b = -0.2.\n    // Then a * 2^16 = -65536 therefore taking mod p we obtain that\n    // a = 21888242871839275222246405745257275088548364400416034343698204186575808430081\n    // b = 21888242871839275222246405745257275088548364400416034343698204186575808482510\n    let a: Field = 21888242871839275222246405745257275088548364400416034343698204186575808430081;\n    let a_quantized = Quantized { x: a };\n    let b = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    let b_quantized = Quantized { x: b };\n    assert(a_quantized < b_quantized);\n\n    // 21888242871839275222246405745257275088548364400416034343698204186575808495617 - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efff8001\n    // - 32768\n    // 21888242871839275222246405745257275088548364400416034343698204186575808495617 - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effb0001\n    let a = Quantized { x: 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efff8001 };\n    // - 327680\n    let b = Quantized { x: 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effb0001 };\n    assert(a > b);\n}\n\n#[test]\nfn test_is_negative() {\n    // Test 1: checking if it's negative for a positive value.\n    // a = 0.2   =>   0.2 * 2^16 = 13107\n    let a: Field = 13107;\n    assert(is_negative(a) == 0);\n\n    // Test 2: checking if it's negative for a negative value.\n    // a = -0.2  =>   -0.2 * 2^16 = -13107\n    // Hence, -13107 mod p = p - 13107 = 21888242871839275222246405745257275088548364400416034343698204186575808482510\n    let a = 21888242871839275222246405745257275088548364400416034343698204186575808482510;\n    assert(is_negative(a) == 1);\n\n    // Test 3: checing if it's negative for a negative larger value.\n    // a = -1301.34  =>  -1301.34 * 2^16 = -85284618\n    // Hence, -85284618 mod p = p - 85284618 = 21888242871839275222246405745257275088548364400416034343698204186575723210999\n    let a = 21888242871839275222246405745257275088548364400416034343698204186575723210999;\n    assert(is_negative(a) == 1);\n}\n\n#[test]\nfn test_add() {\n    // Max value 2^60-1, positive and negative\n    let a = 1152921504606846975;\n    let b = -1152921504606846975;\n    let a_quantized = Quantized { x: a };\n    let b_quantized = Quantized { x: b };\n    let addition_quantized = a_quantized + b_quantized;\n    assert(addition_quantized.x == 0);\n\n    // Test case 1: Max value 2^60 - 1, positive and zero\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = a1_quantized + b1_quantized;\n    assert(addition1_quantized.x == a1);\n\n    // Test case 2: Small positive values\n    let a2 = 12345;\n    let b2 = 67890;\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let addition2_quantized = a2_quantized + b2_quantized;\n    assert(addition2_quantized.x == (a2 + b2));\n\n    // Test case 3: Positive and negative values resulting in a non-zero positive result\n    let a3 = 50000;\n    let b3 = -30000;\n    let a3_quantized = Quantized { x: a3 };\n    let b3_quantized = Quantized { x: b3 };\n    let addition3_quantized = a3_quantized + b3_quantized;\n    assert(addition3_quantized.x == 20000);\n\n    // Test case 4: Positive and negative values resulting in a non-zero negative result\n    let a4 = 30000;\n    let b4 = -50000;\n    let a4_quantized = Quantized { x: a4 };\n    let b4_quantized = Quantized { x: b4 };\n    let addition4_quantized = a4_quantized + b4_quantized;\n    assert(addition4_quantized.x == -20000);\n\n    // Test case 5: Add two negative values resulting in a negative value\n    let a5 = -40000;\n    let b5 = -20000;\n    let a5_quantized = Quantized { x: a5 };\n    let b5_quantized = Quantized { x: b5 };\n    let addition5_quantized = a5_quantized + b5_quantized;\n    assert(addition5_quantized.x == -60000);\n}\n\n#[test]\nfn test_mul() {\n    // Test case 1: Small positive values\n    let a1 = 12345; // original value 12345/2^16 = 0.1883697509765625\n    let b1 = 67890; // original value 67890/2^16 = 1.035919189453125\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    // new value = 0.1883697509765625 * 1.035919189453125 = 0.1951358397491276264190673828125\n    // x = 0.1951358397491276264190673828125 * 2^16 = 12788.422393798828125 => 12788\n    let mult1_quantized = a1_quantized * b1_quantized;\n    assert(mult1_quantized.x == 12788);\n\n    // Test case 2: Large positive values\n    let a2 = 1152921504606846975; // Max value 2^60 - 1, original 1152921504606846975/2^16 = 17592186044415.9999847412109375\n    let b2 = 2; // original 2/2^16 = 0.000030517578125\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let mult2_quantized = a2_quantized * b2_quantized;\n    // 17592186044415.9999847412109375 * 0.000030517578125 = 536870911.9999999995343387126922607421875\n    // x/2^16 = value;  mult by 2^16 and truncate to whole number => x = 35184372088831\n    assert(mult2_quantized.x == 35184372088831);\n\n    // Test case 3: Large positive and small positive value\n    let a3 = 1152921504606846975; // Max value 2^60 - 1, original 1152921504606846975/2^16 = 17592186044415.9999847412109375\n    let b3 = 1; // original value 1/2^16 = 0.0000152587890625\n    let a3_quantized = Quantized { x: a3 };\n    let b3_quantized = Quantized { x: b3 };\n    // mul = 17592186044415.9999847412109375 * 0.0000152587890625 = 268435455.99999999976716935634613037109375\n    let mult3_quantized = a3_quantized * b3_quantized;\n    // mul * 2^16 = 17592186044415.9999847412109375\n    assert(mult3_quantized.x == 17592186044415);\n\n    // Test case 4: Positive and negative value\n    let a4 = 40000; // Original value 40000/2^16 = 0.6103515625\n    let b4 = -30000; // Original value -0.457763671875\n    let a4_quantized = Quantized { x: a4 };\n    let b4_quantized = Quantized { x: b4 };\n\n    // 0.6103515625 * -0.457763671875 = -0.2793967723846435546875\n    let mult4_quantized = a4_quantized * b4_quantized;\n    // -0.2793967723846435546875 * 2^16 = -18310.546875\n    assert(mult4_quantized.x == -18310);\n\n    // Test case 5: Both values negative\n    let a5 = -40000; // Original value -40000 / 2^16 = -0.6103515625\n    let b5 = -20000; // -0.30517578125\n    let a5_quantized = Quantized { x: a5 };\n    let b5_quantized = Quantized { x: b5 };\n    // -0.6103515625 *  -0.30517578125 = 0.186264514923095703125\n    let mult5_quantized = a5_quantized * b5_quantized;\n    // Expected result: 12207.03125\n    assert(mult5_quantized.x == 12207);\n}\n\n#[test]\nfn test_sub() {\n    let a = 1152921504606846975;\n    let b = 1152921504606846975;\n    let a_quantized = Quantized { x: a };\n    let b_quantized = Quantized { x: b };\n    let addition_quantized = a_quantized - b_quantized;\n    assert(addition_quantized.x == 0);\n\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = a1_quantized - b1_quantized;\n    assert(addition1_quantized.x == a1);\n\n    let a1 = 1152921504606846975;\n    let b1 = 0;\n    let a1_quantized = Quantized { x: a1 };\n    let b1_quantized = Quantized { x: b1 };\n    let addition1_quantized = b1_quantized - a1_quantized;\n    // The result should be -a1, which means it is p - a1 in the field because\n    // of the wrap around.\n    let result = 21888242871839275222246405745257275088548364400416034343697051265071201648642;\n    assert(addition1_quantized.x == result);\n\n    let a2 = 12345;\n    let b2 = 67890;\n    let a2_quantized = Quantized { x: a2 };\n    let b2_quantized = Quantized { x: b2 };\n    let addition2_quantized = a2_quantized + b2_quantized;\n    assert(addition2_quantized.x == (a2 + b2));\n}\n","path":"/Users/yurikonishijima/nargo/github.com/hashcloak/noir-mpc-ml/v0.1.2/src/quantized.nr"},"70":{"source":"use super::quantized::{is_negative, Quantized};\nuse std::field::bn254::decompose;\n\n// returns x * 2^-16, interpreted as an integer\n// Scaling down is needed for example after multiplying 2 Quantized values\npub fn scale_down(x: Field) -> Field {\n    let mut z = x;\n\n    let negative = is_negative(z);\n\n    z = negative\n        * (\n            21888242871839275222246405745257275088548364400416034343698204186575808495616 - z + 1\n                - z\n        )\n        + z;\n\n    // Division by 2^16, code as suggested by Tom French @TomAFrench\n    // Cast x to a u16 to preserve only the lowest 16 bits.\n    let lowest_16_bits = z as u16;\n\n    // Subtract off the lowest 16 bits so they are cleared.\n    let x_with_cleared_lower_bits = z - lowest_16_bits as Field;\n\n    // The lowest 16 bits are clear, `x_with_cleared_lower_bits` is divisible by `65536`,\n    // therefore field division is equivalent to integer division.\n    let mut new_x: Field = x_with_cleared_lower_bits / 65536;\n\n    // Flip back sign if the output is negative\n    new_x = negative\n        * (\n            21888242871839275222246405745257275088548364400416034343698204186575808495616 - new_x\n                + 1\n                - new_x\n        )\n        + new_x;\n\n    new_x\n}\n\n// Assert that number of bits <= bitsize\n// if quantized is negative, it count the bits backwards\npub fn assert_bitsize<let bitsize: u32>(q: Quantized) {\n    // Decomposes into two 128 bits chunks\n    let (_, higher_bytes) = decompose(q.x);\n    if higher_bytes == 0 {\n        // positive number\n        q.x.assert_max_bit_size::<bitsize>();\n    } else {\n        // negative number\n        (-q.x).assert_max_bit_size::<bitsize>();\n    }\n}\n\n#[test]\nfn test_assert_bitsize() {\n    // 4 bits\n    assert_bitsize::<4>(Quantized { x: 10 });\n    assert_bitsize::<4>(Quantized { x: -10 });\n\n    // 100 bits\n    assert_bitsize::<100>(Quantized { x: 1267650600228229401496703205375 });\n    assert_bitsize::<100>(Quantized { x: -1267650600228229401496703205375 });\n\n    // 127 bits\n    assert_bitsize::<127>(Quantized { x: 170141183460469231731687303715884105727 });\n    assert_bitsize::<127>(Quantized { x: -170141183460469231731687303715884105727 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize127() {\n    // 131 bits\n    assert_bitsize::<127>(Quantized { x: 1361129467683753853853498429727072845824 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize127_neg() {\n    // 131 bits\n    assert_bitsize::<127>(Quantized { x: -1361129467683753853853498429727072845824 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize1() {\n    // 4 bits\n    assert_bitsize::<3>(Quantized { x: 10 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize2() {\n    // 4 bits\n    assert_bitsize::<3>(Quantized { x: -10 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize3() {\n    // 100 bits\n    assert_bitsize::<99>(Quantized { x: 1267650600228229401496703205375 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize4() {\n    // 100 bits\n    assert_bitsize::<99>(Quantized { x: -1267650600228229401496703205375 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize5() {\n    // 127 bits\n    assert_bitsize::<126>(Quantized { x: 170141183460469231731687303715884105727 });\n}\n\n#[test(should_fail)]\nfn test_fail_assert_bitsize6() {\n    // 127 bits\n    assert_bitsize::<126>(Quantized { x: -170141183460469231731687303715884105727 });\n}\n","path":"/Users/yurikonishijima/nargo/github.com/hashcloak/noir-mpc-ml/v0.1.2/src/utils.nr"}},"names":["main"],"brillig_names":["decompose_hint","lte_hint","unconstrained_div","print_unconstrained","print_unconstrained","directive_invert","directive_integer_quotient","directive_to_radix"]}